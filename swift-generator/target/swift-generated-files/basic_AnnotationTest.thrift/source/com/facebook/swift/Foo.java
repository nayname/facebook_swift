// Generated by swift-generator from AnnotationTest.thrift

package com.facebook.swift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("foo")
public final class Foo
{
    @ThriftConstructor
    public Foo(
        @ThriftField(value=1, name="bar", requiredness=Requiredness.NONE, idlAnnotations = { @ThriftIdlAnnotation(key = "presence", value = "required") }) final int bar,
        @ThriftField(value=2, name="baz", requiredness=Requiredness.NONE, idlAnnotations = { @ThriftIdlAnnotation(key = "presence", value = "manual"), @ThriftIdlAnnotation(key = "cpp.use_pointer", value = "") }) final int baz,
        @ThriftField(value=3, name="qux", requiredness=Requiredness.NONE) final int qux,
        @ThriftField(value=4, name="bop", requiredness=Requiredness.NONE) final int bop
    ) {
        this.bar = bar;
        this.baz = baz;
        this.qux = qux;
        this.bop = bop;
    }

    public static class Builder {
        private int bar;

        public Builder setBar(int bar) {
            this.bar = bar;
            return this;
        }
        private int baz;

        public Builder setBaz(int baz) {
            this.baz = baz;
            return this;
        }
        private int qux;

        public Builder setQux(int qux) {
            this.qux = qux;
            return this;
        }
        private int bop;

        public Builder setBop(int bop) {
            this.bop = bop;
            return this;
        }

        public Builder() { }
        public Builder(Foo other) {
            this.bar = other.bar;
            this.baz = other.baz;
            this.qux = other.qux;
            this.bop = other.bop;
        }

        public Foo build() {
            return new Foo (
                this.bar,
                this.baz,
                this.qux,
                this.bop
            );
        }
    }

    private final int bar;

    @ThriftField(value=1, name="bar", requiredness=Requiredness.NONE, idlAnnotations = { @ThriftIdlAnnotation(key = "presence", value = "required") })
    public int getBar() { return bar; }

    private final int baz;

    @ThriftField(value=2, name="baz", requiredness=Requiredness.NONE, idlAnnotations = { @ThriftIdlAnnotation(key = "presence", value = "manual"), @ThriftIdlAnnotation(key = "cpp.use_pointer", value = "") })
    public int getBaz() { return baz; }

    private final int qux;

    @ThriftField(value=3, name="qux", requiredness=Requiredness.NONE)
    public int getQux() { return qux; }

    private final int bop;

    @ThriftField(value=4, name="bop", requiredness=Requiredness.NONE)
    public int getBop() { return bop; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("bar", bar)
            .add("baz", baz)
            .add("qux", qux)
            .add("bop", bop)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Foo other = (Foo)o;

        return
            Objects.equals(bar, other.bar) &&
            Objects.equals(baz, other.baz) &&
            Objects.equals(qux, other.qux) &&
            Objects.equals(bop, other.bop);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            bar,
            baz,
            qux,
            bop
        });
    }
}
