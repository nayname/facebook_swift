// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("FieldSchema")
public final class FieldSchema
{
    @ThriftConstructor
    public FieldSchema(
        @ThriftField(value=1, name="name", requiredness=Requiredness.NONE) final String name,
        @ThriftField(value=2, name="type", requiredness=Requiredness.NONE) final String type,
        @ThriftField(value=3, name="comment", requiredness=Requiredness.NONE) final String comment
    ) {
        this.name = name;
        this.type = type;
        this.comment = comment;
    }

    public static class Builder {
        private String name;

        public Builder setName(String name) {
            this.name = name;
            return this;
        }
        private String type;

        public Builder setType(String type) {
            this.type = type;
            return this;
        }
        private String comment;

        public Builder setComment(String comment) {
            this.comment = comment;
            return this;
        }

        public Builder() { }
        public Builder(FieldSchema other) {
            this.name = other.name;
            this.type = other.type;
            this.comment = other.comment;
        }

        public FieldSchema build() {
            return new FieldSchema (
                this.name,
                this.type,
                this.comment
            );
        }
    }

    private final String name;

    @ThriftField(value=1, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    private final String type;

    @ThriftField(value=2, name="type", requiredness=Requiredness.NONE)
    public String getType() { return type; }

    private final String comment;

    @ThriftField(value=3, name="comment", requiredness=Requiredness.NONE)
    public String getComment() { return comment; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("name", name)
            .add("type", type)
            .add("comment", comment)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        FieldSchema other = (FieldSchema)o;

        return
            Objects.equals(name, other.name) &&
            Objects.equals(type, other.type) &&
            Objects.equals(comment, other.comment);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            name,
            type,
            comment
        });
    }
}
