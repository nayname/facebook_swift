// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ColumnStatisticsDesc")
public final class ColumnStatisticsDesc
{
    @ThriftConstructor
    public ColumnStatisticsDesc(
        @ThriftField(value=1, name="isTblLevel", requiredness=Requiredness.REQUIRED) final boolean isTblLevel,
        @ThriftField(value=2, name="dbName", requiredness=Requiredness.REQUIRED) final String dbName,
        @ThriftField(value=3, name="tableName", requiredness=Requiredness.REQUIRED) final String tableName,
        @ThriftField(value=4, name="partName", requiredness=Requiredness.OPTIONAL) final String partName,
        @ThriftField(value=5, name="lastAnalyzed", requiredness=Requiredness.OPTIONAL) final Long lastAnalyzed
    ) {
        this.isTblLevel = isTblLevel;
        this.dbName = dbName;
        this.tableName = tableName;
        this.partName = partName;
        this.lastAnalyzed = lastAnalyzed;
    }

    public static class Builder {
        private boolean isTblLevel;

        public Builder setIsTblLevel(boolean isTblLevel) {
            this.isTblLevel = isTblLevel;
            return this;
        }
        private String dbName;

        public Builder setDbName(String dbName) {
            this.dbName = dbName;
            return this;
        }
        private String tableName;

        public Builder setTableName(String tableName) {
            this.tableName = tableName;
            return this;
        }
        private String partName;

        public Builder setPartName(String partName) {
            this.partName = partName;
            return this;
        }
        private Long lastAnalyzed;

        public Builder setLastAnalyzed(Long lastAnalyzed) {
            this.lastAnalyzed = lastAnalyzed;
            return this;
        }

        public Builder() { }
        public Builder(ColumnStatisticsDesc other) {
            this.isTblLevel = other.isTblLevel;
            this.dbName = other.dbName;
            this.tableName = other.tableName;
            this.partName = other.partName;
            this.lastAnalyzed = other.lastAnalyzed;
        }

        public ColumnStatisticsDesc build() {
            return new ColumnStatisticsDesc (
                this.isTblLevel,
                this.dbName,
                this.tableName,
                this.partName,
                this.lastAnalyzed
            );
        }
    }

    private final boolean isTblLevel;

    @ThriftField(value=1, name="isTblLevel", requiredness=Requiredness.REQUIRED)
    public boolean isIsTblLevel() { return isTblLevel; }

    private final String dbName;

    @ThriftField(value=2, name="dbName", requiredness=Requiredness.REQUIRED)
    public String getDbName() { return dbName; }

    private final String tableName;

    @ThriftField(value=3, name="tableName", requiredness=Requiredness.REQUIRED)
    public String getTableName() { return tableName; }

    private final String partName;

    @ThriftField(value=4, name="partName", requiredness=Requiredness.OPTIONAL)
    public String getPartName() { return partName; }

    private final Long lastAnalyzed;

    @ThriftField(value=5, name="lastAnalyzed", requiredness=Requiredness.OPTIONAL)
    public Long getLastAnalyzed() { return lastAnalyzed; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("isTblLevel", isTblLevel)
            .add("dbName", dbName)
            .add("tableName", tableName)
            .add("partName", partName)
            .add("lastAnalyzed", lastAnalyzed)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ColumnStatisticsDesc other = (ColumnStatisticsDesc)o;

        return
            Objects.equals(isTblLevel, other.isTblLevel) &&
            Objects.equals(dbName, other.dbName) &&
            Objects.equals(tableName, other.tableName) &&
            Objects.equals(partName, other.partName) &&
            Objects.equals(lastAnalyzed, other.lastAnalyzed);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            isTblLevel,
            dbName,
            tableName,
            partName,
            lastAnalyzed
        });
    }
}
