// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("SkewedValueList")
public final class SkewedValueList
{
    @ThriftConstructor
    public SkewedValueList(
        @ThriftField(value=1, name="skewedValueList", requiredness=Requiredness.NONE) final List<String> skewedValueList
    ) {
        this.skewedValueList = skewedValueList;
    }

    public static class Builder {
        private List<String> skewedValueList;

        public Builder setSkewedValueList(List<String> skewedValueList) {
            this.skewedValueList = skewedValueList;
            return this;
        }

        public Builder() { }
        public Builder(SkewedValueList other) {
            this.skewedValueList = other.skewedValueList;
        }

        public SkewedValueList build() {
            return new SkewedValueList (
                this.skewedValueList
            );
        }
    }

    private final List<String> skewedValueList;

    @ThriftField(value=1, name="skewedValueList", requiredness=Requiredness.NONE)
    public List<String> getSkewedValueList() { return skewedValueList; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("skewedValueList", skewedValueList)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        SkewedValueList other = (SkewedValueList)o;

        return
            Objects.equals(skewedValueList, other.skewedValueList);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            skewedValueList
        });
    }
}
