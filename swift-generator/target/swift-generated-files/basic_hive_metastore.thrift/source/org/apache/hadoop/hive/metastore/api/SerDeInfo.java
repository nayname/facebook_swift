// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("SerDeInfo")
public final class SerDeInfo
{
    @ThriftConstructor
    public SerDeInfo(
        @ThriftField(value=1, name="name", requiredness=Requiredness.NONE) final String name,
        @ThriftField(value=2, name="serializationLib", requiredness=Requiredness.NONE) final String serializationLib,
        @ThriftField(value=3, name="parameters", requiredness=Requiredness.NONE) final Map<String, String> parameters
    ) {
        this.name = name;
        this.serializationLib = serializationLib;
        this.parameters = parameters;
    }

    public static class Builder {
        private String name;

        public Builder setName(String name) {
            this.name = name;
            return this;
        }
        private String serializationLib;

        public Builder setSerializationLib(String serializationLib) {
            this.serializationLib = serializationLib;
            return this;
        }
        private Map<String, String> parameters;

        public Builder setParameters(Map<String, String> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder() { }
        public Builder(SerDeInfo other) {
            this.name = other.name;
            this.serializationLib = other.serializationLib;
            this.parameters = other.parameters;
        }

        public SerDeInfo build() {
            return new SerDeInfo (
                this.name,
                this.serializationLib,
                this.parameters
            );
        }
    }

    private final String name;

    @ThriftField(value=1, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    private final String serializationLib;

    @ThriftField(value=2, name="serializationLib", requiredness=Requiredness.NONE)
    public String getSerializationLib() { return serializationLib; }

    private final Map<String, String> parameters;

    @ThriftField(value=3, name="parameters", requiredness=Requiredness.NONE)
    public Map<String, String> getParameters() { return parameters; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("name", name)
            .add("serializationLib", serializationLib)
            .add("parameters", parameters)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        SerDeInfo other = (SerDeInfo)o;

        return
            Objects.equals(name, other.name) &&
            Objects.equals(serializationLib, other.serializationLib) &&
            Objects.equals(parameters, other.parameters);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            name,
            serializationLib,
            parameters
        });
    }
}
