// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("HiveObjectRef")
public final class HiveObjectRef
{
    @ThriftConstructor
    public HiveObjectRef(
        @ThriftField(value=1, name="objectType", requiredness=Requiredness.NONE) final HiveObjectType objectType,
        @ThriftField(value=2, name="dbName", requiredness=Requiredness.NONE) final String dbName,
        @ThriftField(value=3, name="objectName", requiredness=Requiredness.NONE) final String objectName,
        @ThriftField(value=4, name="partValues", requiredness=Requiredness.NONE) final List<String> partValues,
        @ThriftField(value=5, name="columnName", requiredness=Requiredness.NONE) final String columnName
    ) {
        this.objectType = objectType;
        this.dbName = dbName;
        this.objectName = objectName;
        this.partValues = partValues;
        this.columnName = columnName;
    }

    public static class Builder {
        private HiveObjectType objectType;

        public Builder setObjectType(HiveObjectType objectType) {
            this.objectType = objectType;
            return this;
        }
        private String dbName;

        public Builder setDbName(String dbName) {
            this.dbName = dbName;
            return this;
        }
        private String objectName;

        public Builder setObjectName(String objectName) {
            this.objectName = objectName;
            return this;
        }
        private List<String> partValues;

        public Builder setPartValues(List<String> partValues) {
            this.partValues = partValues;
            return this;
        }
        private String columnName;

        public Builder setColumnName(String columnName) {
            this.columnName = columnName;
            return this;
        }

        public Builder() { }
        public Builder(HiveObjectRef other) {
            this.objectType = other.objectType;
            this.dbName = other.dbName;
            this.objectName = other.objectName;
            this.partValues = other.partValues;
            this.columnName = other.columnName;
        }

        public HiveObjectRef build() {
            return new HiveObjectRef (
                this.objectType,
                this.dbName,
                this.objectName,
                this.partValues,
                this.columnName
            );
        }
    }

    private final HiveObjectType objectType;

    @ThriftField(value=1, name="objectType", requiredness=Requiredness.NONE)
    public HiveObjectType getObjectType() { return objectType; }

    private final String dbName;

    @ThriftField(value=2, name="dbName", requiredness=Requiredness.NONE)
    public String getDbName() { return dbName; }

    private final String objectName;

    @ThriftField(value=3, name="objectName", requiredness=Requiredness.NONE)
    public String getObjectName() { return objectName; }

    private final List<String> partValues;

    @ThriftField(value=4, name="partValues", requiredness=Requiredness.NONE)
    public List<String> getPartValues() { return partValues; }

    private final String columnName;

    @ThriftField(value=5, name="columnName", requiredness=Requiredness.NONE)
    public String getColumnName() { return columnName; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("objectType", objectType)
            .add("dbName", dbName)
            .add("objectName", objectName)
            .add("partValues", partValues)
            .add("columnName", columnName)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        HiveObjectRef other = (HiveObjectRef)o;

        return
            Objects.equals(objectType, other.objectType) &&
            Objects.equals(dbName, other.dbName) &&
            Objects.equals(objectName, other.objectName) &&
            Objects.equals(partValues, other.partValues) &&
            Objects.equals(columnName, other.columnName);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            objectType,
            dbName,
            objectName,
            partValues,
            columnName
        });
    }
}
