// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("PrincipalPrivilegeSet")
public final class PrincipalPrivilegeSet
{
    @ThriftConstructor
    public PrincipalPrivilegeSet(
        @ThriftField(value=1, name="userPrivileges", requiredness=Requiredness.NONE) final Map<String, List<PrivilegeGrantInfo>> userPrivileges,
        @ThriftField(value=2, name="groupPrivileges", requiredness=Requiredness.NONE) final Map<String, List<PrivilegeGrantInfo>> groupPrivileges,
        @ThriftField(value=3, name="rolePrivileges", requiredness=Requiredness.NONE) final Map<String, List<PrivilegeGrantInfo>> rolePrivileges
    ) {
        this.userPrivileges = userPrivileges;
        this.groupPrivileges = groupPrivileges;
        this.rolePrivileges = rolePrivileges;
    }

    public static class Builder {
        private Map<String, List<PrivilegeGrantInfo>> userPrivileges;

        public Builder setUserPrivileges(Map<String, List<PrivilegeGrantInfo>> userPrivileges) {
            this.userPrivileges = userPrivileges;
            return this;
        }
        private Map<String, List<PrivilegeGrantInfo>> groupPrivileges;

        public Builder setGroupPrivileges(Map<String, List<PrivilegeGrantInfo>> groupPrivileges) {
            this.groupPrivileges = groupPrivileges;
            return this;
        }
        private Map<String, List<PrivilegeGrantInfo>> rolePrivileges;

        public Builder setRolePrivileges(Map<String, List<PrivilegeGrantInfo>> rolePrivileges) {
            this.rolePrivileges = rolePrivileges;
            return this;
        }

        public Builder() { }
        public Builder(PrincipalPrivilegeSet other) {
            this.userPrivileges = other.userPrivileges;
            this.groupPrivileges = other.groupPrivileges;
            this.rolePrivileges = other.rolePrivileges;
        }

        public PrincipalPrivilegeSet build() {
            return new PrincipalPrivilegeSet (
                this.userPrivileges,
                this.groupPrivileges,
                this.rolePrivileges
            );
        }
    }

    private final Map<String, List<PrivilegeGrantInfo>> userPrivileges;

    @ThriftField(value=1, name="userPrivileges", requiredness=Requiredness.NONE)
    public Map<String, List<PrivilegeGrantInfo>> getUserPrivileges() { return userPrivileges; }

    private final Map<String, List<PrivilegeGrantInfo>> groupPrivileges;

    @ThriftField(value=2, name="groupPrivileges", requiredness=Requiredness.NONE)
    public Map<String, List<PrivilegeGrantInfo>> getGroupPrivileges() { return groupPrivileges; }

    private final Map<String, List<PrivilegeGrantInfo>> rolePrivileges;

    @ThriftField(value=3, name="rolePrivileges", requiredness=Requiredness.NONE)
    public Map<String, List<PrivilegeGrantInfo>> getRolePrivileges() { return rolePrivileges; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("userPrivileges", userPrivileges)
            .add("groupPrivileges", groupPrivileges)
            .add("rolePrivileges", rolePrivileges)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        PrincipalPrivilegeSet other = (PrincipalPrivilegeSet)o;

        return
            Objects.equals(userPrivileges, other.userPrivileges) &&
            Objects.equals(groupPrivileges, other.groupPrivileges) &&
            Objects.equals(rolePrivileges, other.rolePrivileges);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            userPrivileges,
            groupPrivileges,
            rolePrivileges
        });
    }
}
