// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("Partition")
public final class Partition
{
    @ThriftConstructor
    public Partition(
        @ThriftField(value=1, name="values", requiredness=Requiredness.NONE) final List<String> values,
        @ThriftField(value=2, name="dbName", requiredness=Requiredness.NONE) final String dbName,
        @ThriftField(value=3, name="tableName", requiredness=Requiredness.NONE) final String tableName,
        @ThriftField(value=4, name="createTime", requiredness=Requiredness.NONE) final int createTime,
        @ThriftField(value=5, name="lastAccessTime", requiredness=Requiredness.NONE) final int lastAccessTime,
        @ThriftField(value=6, name="sd", requiredness=Requiredness.NONE) final StorageDescriptor sd,
        @ThriftField(value=7, name="parameters", requiredness=Requiredness.NONE) final Map<String, String> parameters,
        @ThriftField(value=8, name="privileges", requiredness=Requiredness.OPTIONAL) final PrincipalPrivilegeSet privileges
    ) {
        this.values = values;
        this.dbName = dbName;
        this.tableName = tableName;
        this.createTime = createTime;
        this.lastAccessTime = lastAccessTime;
        this.sd = sd;
        this.parameters = parameters;
        this.privileges = privileges;
    }

    public static class Builder {
        private List<String> values;

        public Builder setValues(List<String> values) {
            this.values = values;
            return this;
        }
        private String dbName;

        public Builder setDbName(String dbName) {
            this.dbName = dbName;
            return this;
        }
        private String tableName;

        public Builder setTableName(String tableName) {
            this.tableName = tableName;
            return this;
        }
        private int createTime;

        public Builder setCreateTime(int createTime) {
            this.createTime = createTime;
            return this;
        }
        private int lastAccessTime;

        public Builder setLastAccessTime(int lastAccessTime) {
            this.lastAccessTime = lastAccessTime;
            return this;
        }
        private StorageDescriptor sd;

        public Builder setSd(StorageDescriptor sd) {
            this.sd = sd;
            return this;
        }
        private Map<String, String> parameters;

        public Builder setParameters(Map<String, String> parameters) {
            this.parameters = parameters;
            return this;
        }
        private PrincipalPrivilegeSet privileges;

        public Builder setPrivileges(PrincipalPrivilegeSet privileges) {
            this.privileges = privileges;
            return this;
        }

        public Builder() { }
        public Builder(Partition other) {
            this.values = other.values;
            this.dbName = other.dbName;
            this.tableName = other.tableName;
            this.createTime = other.createTime;
            this.lastAccessTime = other.lastAccessTime;
            this.sd = other.sd;
            this.parameters = other.parameters;
            this.privileges = other.privileges;
        }

        public Partition build() {
            return new Partition (
                this.values,
                this.dbName,
                this.tableName,
                this.createTime,
                this.lastAccessTime,
                this.sd,
                this.parameters,
                this.privileges
            );
        }
    }

    private final List<String> values;

    @ThriftField(value=1, name="values", requiredness=Requiredness.NONE)
    public List<String> getValues() { return values; }

    private final String dbName;

    @ThriftField(value=2, name="dbName", requiredness=Requiredness.NONE)
    public String getDbName() { return dbName; }

    private final String tableName;

    @ThriftField(value=3, name="tableName", requiredness=Requiredness.NONE)
    public String getTableName() { return tableName; }

    private final int createTime;

    @ThriftField(value=4, name="createTime", requiredness=Requiredness.NONE)
    public int getCreateTime() { return createTime; }

    private final int lastAccessTime;

    @ThriftField(value=5, name="lastAccessTime", requiredness=Requiredness.NONE)
    public int getLastAccessTime() { return lastAccessTime; }

    private final StorageDescriptor sd;

    @ThriftField(value=6, name="sd", requiredness=Requiredness.NONE)
    public StorageDescriptor getSd() { return sd; }

    private final Map<String, String> parameters;

    @ThriftField(value=7, name="parameters", requiredness=Requiredness.NONE)
    public Map<String, String> getParameters() { return parameters; }

    private final PrincipalPrivilegeSet privileges;

    @ThriftField(value=8, name="privileges", requiredness=Requiredness.OPTIONAL)
    public PrincipalPrivilegeSet getPrivileges() { return privileges; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("values", values)
            .add("dbName", dbName)
            .add("tableName", tableName)
            .add("createTime", createTime)
            .add("lastAccessTime", lastAccessTime)
            .add("sd", sd)
            .add("parameters", parameters)
            .add("privileges", privileges)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Partition other = (Partition)o;

        return
            Objects.equals(values, other.values) &&
            Objects.equals(dbName, other.dbName) &&
            Objects.equals(tableName, other.tableName) &&
            Objects.equals(createTime, other.createTime) &&
            Objects.equals(lastAccessTime, other.lastAccessTime) &&
            Objects.equals(sd, other.sd) &&
            Objects.equals(parameters, other.parameters) &&
            Objects.equals(privileges, other.privileges);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            values,
            dbName,
            tableName,
            createTime,
            lastAccessTime,
            sd,
            parameters,
            privileges
        });
    }
}
