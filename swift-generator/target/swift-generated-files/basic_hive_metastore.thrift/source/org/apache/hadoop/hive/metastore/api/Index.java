// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("Index")
public final class Index
{
    @ThriftConstructor
    public Index(
        @ThriftField(value=1, name="indexName", requiredness=Requiredness.NONE) final String indexName,
        @ThriftField(value=2, name="indexHandlerClass", requiredness=Requiredness.NONE) final String indexHandlerClass,
        @ThriftField(value=3, name="dbName", requiredness=Requiredness.NONE) final String dbName,
        @ThriftField(value=4, name="origTableName", requiredness=Requiredness.NONE) final String origTableName,
        @ThriftField(value=5, name="createTime", requiredness=Requiredness.NONE) final int createTime,
        @ThriftField(value=6, name="lastAccessTime", requiredness=Requiredness.NONE) final int lastAccessTime,
        @ThriftField(value=7, name="indexTableName", requiredness=Requiredness.NONE) final String indexTableName,
        @ThriftField(value=8, name="sd", requiredness=Requiredness.NONE) final StorageDescriptor sd,
        @ThriftField(value=9, name="parameters", requiredness=Requiredness.NONE) final Map<String, String> parameters,
        @ThriftField(value=10, name="deferredRebuild", requiredness=Requiredness.NONE) final boolean deferredRebuild
    ) {
        this.indexName = indexName;
        this.indexHandlerClass = indexHandlerClass;
        this.dbName = dbName;
        this.origTableName = origTableName;
        this.createTime = createTime;
        this.lastAccessTime = lastAccessTime;
        this.indexTableName = indexTableName;
        this.sd = sd;
        this.parameters = parameters;
        this.deferredRebuild = deferredRebuild;
    }

    public static class Builder {
        private String indexName;

        public Builder setIndexName(String indexName) {
            this.indexName = indexName;
            return this;
        }
        private String indexHandlerClass;

        public Builder setIndexHandlerClass(String indexHandlerClass) {
            this.indexHandlerClass = indexHandlerClass;
            return this;
        }
        private String dbName;

        public Builder setDbName(String dbName) {
            this.dbName = dbName;
            return this;
        }
        private String origTableName;

        public Builder setOrigTableName(String origTableName) {
            this.origTableName = origTableName;
            return this;
        }
        private int createTime;

        public Builder setCreateTime(int createTime) {
            this.createTime = createTime;
            return this;
        }
        private int lastAccessTime;

        public Builder setLastAccessTime(int lastAccessTime) {
            this.lastAccessTime = lastAccessTime;
            return this;
        }
        private String indexTableName;

        public Builder setIndexTableName(String indexTableName) {
            this.indexTableName = indexTableName;
            return this;
        }
        private StorageDescriptor sd;

        public Builder setSd(StorageDescriptor sd) {
            this.sd = sd;
            return this;
        }
        private Map<String, String> parameters;

        public Builder setParameters(Map<String, String> parameters) {
            this.parameters = parameters;
            return this;
        }
        private boolean deferredRebuild;

        public Builder setDeferredRebuild(boolean deferredRebuild) {
            this.deferredRebuild = deferredRebuild;
            return this;
        }

        public Builder() { }
        public Builder(Index other) {
            this.indexName = other.indexName;
            this.indexHandlerClass = other.indexHandlerClass;
            this.dbName = other.dbName;
            this.origTableName = other.origTableName;
            this.createTime = other.createTime;
            this.lastAccessTime = other.lastAccessTime;
            this.indexTableName = other.indexTableName;
            this.sd = other.sd;
            this.parameters = other.parameters;
            this.deferredRebuild = other.deferredRebuild;
        }

        public Index build() {
            return new Index (
                this.indexName,
                this.indexHandlerClass,
                this.dbName,
                this.origTableName,
                this.createTime,
                this.lastAccessTime,
                this.indexTableName,
                this.sd,
                this.parameters,
                this.deferredRebuild
            );
        }
    }

    private final String indexName;

    @ThriftField(value=1, name="indexName", requiredness=Requiredness.NONE)
    public String getIndexName() { return indexName; }

    private final String indexHandlerClass;

    @ThriftField(value=2, name="indexHandlerClass", requiredness=Requiredness.NONE)
    public String getIndexHandlerClass() { return indexHandlerClass; }

    private final String dbName;

    @ThriftField(value=3, name="dbName", requiredness=Requiredness.NONE)
    public String getDbName() { return dbName; }

    private final String origTableName;

    @ThriftField(value=4, name="origTableName", requiredness=Requiredness.NONE)
    public String getOrigTableName() { return origTableName; }

    private final int createTime;

    @ThriftField(value=5, name="createTime", requiredness=Requiredness.NONE)
    public int getCreateTime() { return createTime; }

    private final int lastAccessTime;

    @ThriftField(value=6, name="lastAccessTime", requiredness=Requiredness.NONE)
    public int getLastAccessTime() { return lastAccessTime; }

    private final String indexTableName;

    @ThriftField(value=7, name="indexTableName", requiredness=Requiredness.NONE)
    public String getIndexTableName() { return indexTableName; }

    private final StorageDescriptor sd;

    @ThriftField(value=8, name="sd", requiredness=Requiredness.NONE)
    public StorageDescriptor getSd() { return sd; }

    private final Map<String, String> parameters;

    @ThriftField(value=9, name="parameters", requiredness=Requiredness.NONE)
    public Map<String, String> getParameters() { return parameters; }

    private final boolean deferredRebuild;

    @ThriftField(value=10, name="deferredRebuild", requiredness=Requiredness.NONE)
    public boolean isDeferredRebuild() { return deferredRebuild; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("indexName", indexName)
            .add("indexHandlerClass", indexHandlerClass)
            .add("dbName", dbName)
            .add("origTableName", origTableName)
            .add("createTime", createTime)
            .add("lastAccessTime", lastAccessTime)
            .add("indexTableName", indexTableName)
            .add("sd", sd)
            .add("parameters", parameters)
            .add("deferredRebuild", deferredRebuild)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Index other = (Index)o;

        return
            Objects.equals(indexName, other.indexName) &&
            Objects.equals(indexHandlerClass, other.indexHandlerClass) &&
            Objects.equals(dbName, other.dbName) &&
            Objects.equals(origTableName, other.origTableName) &&
            Objects.equals(createTime, other.createTime) &&
            Objects.equals(lastAccessTime, other.lastAccessTime) &&
            Objects.equals(indexTableName, other.indexTableName) &&
            Objects.equals(sd, other.sd) &&
            Objects.equals(parameters, other.parameters) &&
            Objects.equals(deferredRebuild, other.deferredRebuild);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            indexName,
            indexHandlerClass,
            dbName,
            origTableName,
            createTime,
            lastAccessTime,
            indexTableName,
            sd,
            parameters,
            deferredRebuild
        });
    }
}
