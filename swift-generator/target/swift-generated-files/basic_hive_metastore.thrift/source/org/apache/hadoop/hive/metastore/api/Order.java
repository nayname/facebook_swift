// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("Order")
public final class Order
{
    @ThriftConstructor
    public Order(
        @ThriftField(value=1, name="col", requiredness=Requiredness.NONE) final String col,
        @ThriftField(value=2, name="order", requiredness=Requiredness.NONE) final int order
    ) {
        this.col = col;
        this.order = order;
    }

    public static class Builder {
        private String col;

        public Builder setCol(String col) {
            this.col = col;
            return this;
        }
        private int order;

        public Builder setOrder(int order) {
            this.order = order;
            return this;
        }

        public Builder() { }
        public Builder(Order other) {
            this.col = other.col;
            this.order = other.order;
        }

        public Order build() {
            return new Order (
                this.col,
                this.order
            );
        }
    }

    private final String col;

    @ThriftField(value=1, name="col", requiredness=Requiredness.NONE)
    public String getCol() { return col; }

    private final int order;

    @ThriftField(value=2, name="order", requiredness=Requiredness.NONE)
    public int getOrder() { return order; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("col", col)
            .add("order", order)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Order other = (Order)o;

        return
            Objects.equals(col, other.col) &&
            Objects.equals(order, other.order);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            col,
            order
        });
    }
}
