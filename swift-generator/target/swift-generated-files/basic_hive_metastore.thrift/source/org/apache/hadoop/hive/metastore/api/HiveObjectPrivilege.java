// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("HiveObjectPrivilege")
public final class HiveObjectPrivilege
{
    @ThriftConstructor
    public HiveObjectPrivilege(
        @ThriftField(value=1, name="hiveObject", requiredness=Requiredness.NONE) final HiveObjectRef hiveObject,
        @ThriftField(value=2, name="principalName", requiredness=Requiredness.NONE) final String principalName,
        @ThriftField(value=3, name="principalType", requiredness=Requiredness.NONE) final PrincipalType principalType,
        @ThriftField(value=4, name="grantInfo", requiredness=Requiredness.NONE) final PrivilegeGrantInfo grantInfo
    ) {
        this.hiveObject = hiveObject;
        this.principalName = principalName;
        this.principalType = principalType;
        this.grantInfo = grantInfo;
    }

    public static class Builder {
        private HiveObjectRef hiveObject;

        public Builder setHiveObject(HiveObjectRef hiveObject) {
            this.hiveObject = hiveObject;
            return this;
        }
        private String principalName;

        public Builder setPrincipalName(String principalName) {
            this.principalName = principalName;
            return this;
        }
        private PrincipalType principalType;

        public Builder setPrincipalType(PrincipalType principalType) {
            this.principalType = principalType;
            return this;
        }
        private PrivilegeGrantInfo grantInfo;

        public Builder setGrantInfo(PrivilegeGrantInfo grantInfo) {
            this.grantInfo = grantInfo;
            return this;
        }

        public Builder() { }
        public Builder(HiveObjectPrivilege other) {
            this.hiveObject = other.hiveObject;
            this.principalName = other.principalName;
            this.principalType = other.principalType;
            this.grantInfo = other.grantInfo;
        }

        public HiveObjectPrivilege build() {
            return new HiveObjectPrivilege (
                this.hiveObject,
                this.principalName,
                this.principalType,
                this.grantInfo
            );
        }
    }

    private final HiveObjectRef hiveObject;

    @ThriftField(value=1, name="hiveObject", requiredness=Requiredness.NONE)
    public HiveObjectRef getHiveObject() { return hiveObject; }

    private final String principalName;

    @ThriftField(value=2, name="principalName", requiredness=Requiredness.NONE)
    public String getPrincipalName() { return principalName; }

    private final PrincipalType principalType;

    @ThriftField(value=3, name="principalType", requiredness=Requiredness.NONE)
    public PrincipalType getPrincipalType() { return principalType; }

    private final PrivilegeGrantInfo grantInfo;

    @ThriftField(value=4, name="grantInfo", requiredness=Requiredness.NONE)
    public PrivilegeGrantInfo getGrantInfo() { return grantInfo; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("hiveObject", hiveObject)
            .add("principalName", principalName)
            .add("principalType", principalType)
            .add("grantInfo", grantInfo)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        HiveObjectPrivilege other = (HiveObjectPrivilege)o;

        return
            Objects.equals(hiveObject, other.hiveObject) &&
            Objects.equals(principalName, other.principalName) &&
            Objects.equals(principalType, other.principalType) &&
            Objects.equals(grantInfo, other.grantInfo);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            hiveObject,
            principalName,
            principalType,
            grantInfo
        });
    }
}
