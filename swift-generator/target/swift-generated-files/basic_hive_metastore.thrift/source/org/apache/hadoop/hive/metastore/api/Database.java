// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("Database")
public final class Database
{
    @ThriftConstructor
    public Database(
        @ThriftField(value=1, name="name", requiredness=Requiredness.NONE) final String name,
        @ThriftField(value=2, name="description", requiredness=Requiredness.NONE) final String description,
        @ThriftField(value=3, name="locationUri", requiredness=Requiredness.NONE) final String locationUri,
        @ThriftField(value=4, name="parameters", requiredness=Requiredness.NONE) final Map<String, String> parameters,
        @ThriftField(value=5, name="privileges", requiredness=Requiredness.OPTIONAL) final PrincipalPrivilegeSet privileges
    ) {
        this.name = name;
        this.description = description;
        this.locationUri = locationUri;
        this.parameters = parameters;
        this.privileges = privileges;
    }

    public static class Builder {
        private String name;

        public Builder setName(String name) {
            this.name = name;
            return this;
        }
        private String description;

        public Builder setDescription(String description) {
            this.description = description;
            return this;
        }
        private String locationUri;

        public Builder setLocationUri(String locationUri) {
            this.locationUri = locationUri;
            return this;
        }
        private Map<String, String> parameters;

        public Builder setParameters(Map<String, String> parameters) {
            this.parameters = parameters;
            return this;
        }
        private PrincipalPrivilegeSet privileges;

        public Builder setPrivileges(PrincipalPrivilegeSet privileges) {
            this.privileges = privileges;
            return this;
        }

        public Builder() { }
        public Builder(Database other) {
            this.name = other.name;
            this.description = other.description;
            this.locationUri = other.locationUri;
            this.parameters = other.parameters;
            this.privileges = other.privileges;
        }

        public Database build() {
            return new Database (
                this.name,
                this.description,
                this.locationUri,
                this.parameters,
                this.privileges
            );
        }
    }

    private final String name;

    @ThriftField(value=1, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    private final String description;

    @ThriftField(value=2, name="description", requiredness=Requiredness.NONE)
    public String getDescription() { return description; }

    private final String locationUri;

    @ThriftField(value=3, name="locationUri", requiredness=Requiredness.NONE)
    public String getLocationUri() { return locationUri; }

    private final Map<String, String> parameters;

    @ThriftField(value=4, name="parameters", requiredness=Requiredness.NONE)
    public Map<String, String> getParameters() { return parameters; }

    private final PrincipalPrivilegeSet privileges;

    @ThriftField(value=5, name="privileges", requiredness=Requiredness.OPTIONAL)
    public PrincipalPrivilegeSet getPrivileges() { return privileges; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("name", name)
            .add("description", description)
            .add("locationUri", locationUri)
            .add("parameters", parameters)
            .add("privileges", privileges)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Database other = (Database)o;

        return
            Objects.equals(name, other.name) &&
            Objects.equals(description, other.description) &&
            Objects.equals(locationUri, other.locationUri) &&
            Objects.equals(parameters, other.parameters) &&
            Objects.equals(privileges, other.privileges);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            name,
            description,
            locationUri,
            parameters,
            privileges
        });
    }
}
