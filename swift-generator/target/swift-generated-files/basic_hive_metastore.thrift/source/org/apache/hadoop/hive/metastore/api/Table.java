// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("Table")
public final class Table
{
    @ThriftConstructor
    public Table(
        @ThriftField(value=1, name="tableName", requiredness=Requiredness.NONE) final String tableName,
        @ThriftField(value=2, name="dbName", requiredness=Requiredness.NONE) final String dbName,
        @ThriftField(value=3, name="owner", requiredness=Requiredness.NONE) final String owner,
        @ThriftField(value=4, name="createTime", requiredness=Requiredness.NONE) final int createTime,
        @ThriftField(value=5, name="lastAccessTime", requiredness=Requiredness.NONE) final int lastAccessTime,
        @ThriftField(value=6, name="retention", requiredness=Requiredness.NONE) final int retention,
        @ThriftField(value=7, name="sd", requiredness=Requiredness.NONE) final StorageDescriptor sd,
        @ThriftField(value=8, name="partitionKeys", requiredness=Requiredness.NONE) final List<FieldSchema> partitionKeys,
        @ThriftField(value=9, name="parameters", requiredness=Requiredness.NONE) final Map<String, String> parameters,
        @ThriftField(value=10, name="viewOriginalText", requiredness=Requiredness.NONE) final String viewOriginalText,
        @ThriftField(value=11, name="viewExpandedText", requiredness=Requiredness.NONE) final String viewExpandedText,
        @ThriftField(value=12, name="tableType", requiredness=Requiredness.NONE) final String tableType,
        @ThriftField(value=13, name="privileges", requiredness=Requiredness.OPTIONAL) final PrincipalPrivilegeSet privileges
    ) {
        this.tableName = tableName;
        this.dbName = dbName;
        this.owner = owner;
        this.createTime = createTime;
        this.lastAccessTime = lastAccessTime;
        this.retention = retention;
        this.sd = sd;
        this.partitionKeys = partitionKeys;
        this.parameters = parameters;
        this.viewOriginalText = viewOriginalText;
        this.viewExpandedText = viewExpandedText;
        this.tableType = tableType;
        this.privileges = privileges;
    }

    public static class Builder {
        private String tableName;

        public Builder setTableName(String tableName) {
            this.tableName = tableName;
            return this;
        }
        private String dbName;

        public Builder setDbName(String dbName) {
            this.dbName = dbName;
            return this;
        }
        private String owner;

        public Builder setOwner(String owner) {
            this.owner = owner;
            return this;
        }
        private int createTime;

        public Builder setCreateTime(int createTime) {
            this.createTime = createTime;
            return this;
        }
        private int lastAccessTime;

        public Builder setLastAccessTime(int lastAccessTime) {
            this.lastAccessTime = lastAccessTime;
            return this;
        }
        private int retention;

        public Builder setRetention(int retention) {
            this.retention = retention;
            return this;
        }
        private StorageDescriptor sd;

        public Builder setSd(StorageDescriptor sd) {
            this.sd = sd;
            return this;
        }
        private List<FieldSchema> partitionKeys;

        public Builder setPartitionKeys(List<FieldSchema> partitionKeys) {
            this.partitionKeys = partitionKeys;
            return this;
        }
        private Map<String, String> parameters;

        public Builder setParameters(Map<String, String> parameters) {
            this.parameters = parameters;
            return this;
        }
        private String viewOriginalText;

        public Builder setViewOriginalText(String viewOriginalText) {
            this.viewOriginalText = viewOriginalText;
            return this;
        }
        private String viewExpandedText;

        public Builder setViewExpandedText(String viewExpandedText) {
            this.viewExpandedText = viewExpandedText;
            return this;
        }
        private String tableType;

        public Builder setTableType(String tableType) {
            this.tableType = tableType;
            return this;
        }
        private PrincipalPrivilegeSet privileges;

        public Builder setPrivileges(PrincipalPrivilegeSet privileges) {
            this.privileges = privileges;
            return this;
        }

        public Builder() { }
        public Builder(Table other) {
            this.tableName = other.tableName;
            this.dbName = other.dbName;
            this.owner = other.owner;
            this.createTime = other.createTime;
            this.lastAccessTime = other.lastAccessTime;
            this.retention = other.retention;
            this.sd = other.sd;
            this.partitionKeys = other.partitionKeys;
            this.parameters = other.parameters;
            this.viewOriginalText = other.viewOriginalText;
            this.viewExpandedText = other.viewExpandedText;
            this.tableType = other.tableType;
            this.privileges = other.privileges;
        }

        public Table build() {
            return new Table (
                this.tableName,
                this.dbName,
                this.owner,
                this.createTime,
                this.lastAccessTime,
                this.retention,
                this.sd,
                this.partitionKeys,
                this.parameters,
                this.viewOriginalText,
                this.viewExpandedText,
                this.tableType,
                this.privileges
            );
        }
    }

    private final String tableName;

    @ThriftField(value=1, name="tableName", requiredness=Requiredness.NONE)
    public String getTableName() { return tableName; }

    private final String dbName;

    @ThriftField(value=2, name="dbName", requiredness=Requiredness.NONE)
    public String getDbName() { return dbName; }

    private final String owner;

    @ThriftField(value=3, name="owner", requiredness=Requiredness.NONE)
    public String getOwner() { return owner; }

    private final int createTime;

    @ThriftField(value=4, name="createTime", requiredness=Requiredness.NONE)
    public int getCreateTime() { return createTime; }

    private final int lastAccessTime;

    @ThriftField(value=5, name="lastAccessTime", requiredness=Requiredness.NONE)
    public int getLastAccessTime() { return lastAccessTime; }

    private final int retention;

    @ThriftField(value=6, name="retention", requiredness=Requiredness.NONE)
    public int getRetention() { return retention; }

    private final StorageDescriptor sd;

    @ThriftField(value=7, name="sd", requiredness=Requiredness.NONE)
    public StorageDescriptor getSd() { return sd; }

    private final List<FieldSchema> partitionKeys;

    @ThriftField(value=8, name="partitionKeys", requiredness=Requiredness.NONE)
    public List<FieldSchema> getPartitionKeys() { return partitionKeys; }

    private final Map<String, String> parameters;

    @ThriftField(value=9, name="parameters", requiredness=Requiredness.NONE)
    public Map<String, String> getParameters() { return parameters; }

    private final String viewOriginalText;

    @ThriftField(value=10, name="viewOriginalText", requiredness=Requiredness.NONE)
    public String getViewOriginalText() { return viewOriginalText; }

    private final String viewExpandedText;

    @ThriftField(value=11, name="viewExpandedText", requiredness=Requiredness.NONE)
    public String getViewExpandedText() { return viewExpandedText; }

    private final String tableType;

    @ThriftField(value=12, name="tableType", requiredness=Requiredness.NONE)
    public String getTableType() { return tableType; }

    private final PrincipalPrivilegeSet privileges;

    @ThriftField(value=13, name="privileges", requiredness=Requiredness.OPTIONAL)
    public PrincipalPrivilegeSet getPrivileges() { return privileges; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("tableName", tableName)
            .add("dbName", dbName)
            .add("owner", owner)
            .add("createTime", createTime)
            .add("lastAccessTime", lastAccessTime)
            .add("retention", retention)
            .add("sd", sd)
            .add("partitionKeys", partitionKeys)
            .add("parameters", parameters)
            .add("viewOriginalText", viewOriginalText)
            .add("viewExpandedText", viewExpandedText)
            .add("tableType", tableType)
            .add("privileges", privileges)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Table other = (Table)o;

        return
            Objects.equals(tableName, other.tableName) &&
            Objects.equals(dbName, other.dbName) &&
            Objects.equals(owner, other.owner) &&
            Objects.equals(createTime, other.createTime) &&
            Objects.equals(lastAccessTime, other.lastAccessTime) &&
            Objects.equals(retention, other.retention) &&
            Objects.equals(sd, other.sd) &&
            Objects.equals(partitionKeys, other.partitionKeys) &&
            Objects.equals(parameters, other.parameters) &&
            Objects.equals(viewOriginalText, other.viewOriginalText) &&
            Objects.equals(viewExpandedText, other.viewExpandedText) &&
            Objects.equals(tableType, other.tableType) &&
            Objects.equals(privileges, other.privileges);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            tableName,
            dbName,
            owner,
            createTime,
            lastAccessTime,
            retention,
            sd,
            partitionKeys,
            parameters,
            viewOriginalText,
            viewExpandedText,
            tableType,
            privileges
        });
    }
}
