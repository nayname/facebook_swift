// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("Version")
public final class Version
{
    @ThriftConstructor
    public Version(
        @ThriftField(value=1, name="version", requiredness=Requiredness.NONE) final String version,
        @ThriftField(value=2, name="comments", requiredness=Requiredness.NONE) final String comments
    ) {
        this.version = version;
        this.comments = comments;
    }

    public static class Builder {
        private String version;

        public Builder setVersion(String version) {
            this.version = version;
            return this;
        }
        private String comments;

        public Builder setComments(String comments) {
            this.comments = comments;
            return this;
        }

        public Builder() { }
        public Builder(Version other) {
            this.version = other.version;
            this.comments = other.comments;
        }

        public Version build() {
            return new Version (
                this.version,
                this.comments
            );
        }
    }

    private final String version;

    @ThriftField(value=1, name="version", requiredness=Requiredness.NONE)
    public String getVersion() { return version; }

    private final String comments;

    @ThriftField(value=2, name="comments", requiredness=Requiredness.NONE)
    public String getComments() { return comments; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("version", version)
            .add("comments", comments)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Version other = (Version)o;

        return
            Objects.equals(version, other.version) &&
            Objects.equals(comments, other.comments);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            version,
            comments
        });
    }
}
