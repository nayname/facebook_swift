// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("LongColumnStatsData")
public final class LongColumnStatsData
{
    @ThriftConstructor
    public LongColumnStatsData(
        @ThriftField(value=1, name="lowValue", requiredness=Requiredness.REQUIRED) final long lowValue,
        @ThriftField(value=2, name="highValue", requiredness=Requiredness.REQUIRED) final long highValue,
        @ThriftField(value=3, name="numNulls", requiredness=Requiredness.REQUIRED) final long numNulls,
        @ThriftField(value=4, name="numDVs", requiredness=Requiredness.REQUIRED) final long numDVs
    ) {
        this.lowValue = lowValue;
        this.highValue = highValue;
        this.numNulls = numNulls;
        this.numDVs = numDVs;
    }

    public static class Builder {
        private long lowValue;

        public Builder setLowValue(long lowValue) {
            this.lowValue = lowValue;
            return this;
        }
        private long highValue;

        public Builder setHighValue(long highValue) {
            this.highValue = highValue;
            return this;
        }
        private long numNulls;

        public Builder setNumNulls(long numNulls) {
            this.numNulls = numNulls;
            return this;
        }
        private long numDVs;

        public Builder setNumDVs(long numDVs) {
            this.numDVs = numDVs;
            return this;
        }

        public Builder() { }
        public Builder(LongColumnStatsData other) {
            this.lowValue = other.lowValue;
            this.highValue = other.highValue;
            this.numNulls = other.numNulls;
            this.numDVs = other.numDVs;
        }

        public LongColumnStatsData build() {
            return new LongColumnStatsData (
                this.lowValue,
                this.highValue,
                this.numNulls,
                this.numDVs
            );
        }
    }

    private final long lowValue;

    @ThriftField(value=1, name="lowValue", requiredness=Requiredness.REQUIRED)
    public long getLowValue() { return lowValue; }

    private final long highValue;

    @ThriftField(value=2, name="highValue", requiredness=Requiredness.REQUIRED)
    public long getHighValue() { return highValue; }

    private final long numNulls;

    @ThriftField(value=3, name="numNulls", requiredness=Requiredness.REQUIRED)
    public long getNumNulls() { return numNulls; }

    private final long numDVs;

    @ThriftField(value=4, name="numDVs", requiredness=Requiredness.REQUIRED)
    public long getNumDVs() { return numDVs; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("lowValue", lowValue)
            .add("highValue", highValue)
            .add("numNulls", numNulls)
            .add("numDVs", numDVs)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        LongColumnStatsData other = (LongColumnStatsData)o;

        return
            Objects.equals(lowValue, other.lowValue) &&
            Objects.equals(highValue, other.highValue) &&
            Objects.equals(numNulls, other.numNulls) &&
            Objects.equals(numDVs, other.numDVs);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            lowValue,
            highValue,
            numNulls,
            numDVs
        });
    }
}
