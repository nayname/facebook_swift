// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("StorageDescriptor")
public final class StorageDescriptor
{
    @ThriftConstructor
    public StorageDescriptor(
        @ThriftField(value=1, name="cols", requiredness=Requiredness.NONE) final List<FieldSchema> cols,
        @ThriftField(value=2, name="location", requiredness=Requiredness.NONE) final String location,
        @ThriftField(value=3, name="inputFormat", requiredness=Requiredness.NONE) final String inputFormat,
        @ThriftField(value=4, name="outputFormat", requiredness=Requiredness.NONE) final String outputFormat,
        @ThriftField(value=5, name="compressed", requiredness=Requiredness.NONE) final boolean compressed,
        @ThriftField(value=6, name="numBuckets", requiredness=Requiredness.NONE) final int numBuckets,
        @ThriftField(value=7, name="serdeInfo", requiredness=Requiredness.NONE) final SerDeInfo serdeInfo,
        @ThriftField(value=8, name="bucketCols", requiredness=Requiredness.NONE) final List<String> bucketCols,
        @ThriftField(value=9, name="sortCols", requiredness=Requiredness.NONE) final List<Order> sortCols,
        @ThriftField(value=10, name="parameters", requiredness=Requiredness.NONE) final Map<String, String> parameters,
        @ThriftField(value=11, name="skewedInfo", requiredness=Requiredness.OPTIONAL) final SkewedInfo skewedInfo,
        @ThriftField(value=12, name="storedAsSubDirectories", requiredness=Requiredness.OPTIONAL) final Boolean storedAsSubDirectories
    ) {
        this.cols = cols;
        this.location = location;
        this.inputFormat = inputFormat;
        this.outputFormat = outputFormat;
        this.compressed = compressed;
        this.numBuckets = numBuckets;
        this.serdeInfo = serdeInfo;
        this.bucketCols = bucketCols;
        this.sortCols = sortCols;
        this.parameters = parameters;
        this.skewedInfo = skewedInfo;
        this.storedAsSubDirectories = storedAsSubDirectories;
    }

    public static class Builder {
        private List<FieldSchema> cols;

        public Builder setCols(List<FieldSchema> cols) {
            this.cols = cols;
            return this;
        }
        private String location;

        public Builder setLocation(String location) {
            this.location = location;
            return this;
        }
        private String inputFormat;

        public Builder setInputFormat(String inputFormat) {
            this.inputFormat = inputFormat;
            return this;
        }
        private String outputFormat;

        public Builder setOutputFormat(String outputFormat) {
            this.outputFormat = outputFormat;
            return this;
        }
        private boolean compressed;

        public Builder setCompressed(boolean compressed) {
            this.compressed = compressed;
            return this;
        }
        private int numBuckets;

        public Builder setNumBuckets(int numBuckets) {
            this.numBuckets = numBuckets;
            return this;
        }
        private SerDeInfo serdeInfo;

        public Builder setSerdeInfo(SerDeInfo serdeInfo) {
            this.serdeInfo = serdeInfo;
            return this;
        }
        private List<String> bucketCols;

        public Builder setBucketCols(List<String> bucketCols) {
            this.bucketCols = bucketCols;
            return this;
        }
        private List<Order> sortCols;

        public Builder setSortCols(List<Order> sortCols) {
            this.sortCols = sortCols;
            return this;
        }
        private Map<String, String> parameters;

        public Builder setParameters(Map<String, String> parameters) {
            this.parameters = parameters;
            return this;
        }
        private SkewedInfo skewedInfo;

        public Builder setSkewedInfo(SkewedInfo skewedInfo) {
            this.skewedInfo = skewedInfo;
            return this;
        }
        private Boolean storedAsSubDirectories;

        public Builder setStoredAsSubDirectories(Boolean storedAsSubDirectories) {
            this.storedAsSubDirectories = storedAsSubDirectories;
            return this;
        }

        public Builder() { }
        public Builder(StorageDescriptor other) {
            this.cols = other.cols;
            this.location = other.location;
            this.inputFormat = other.inputFormat;
            this.outputFormat = other.outputFormat;
            this.compressed = other.compressed;
            this.numBuckets = other.numBuckets;
            this.serdeInfo = other.serdeInfo;
            this.bucketCols = other.bucketCols;
            this.sortCols = other.sortCols;
            this.parameters = other.parameters;
            this.skewedInfo = other.skewedInfo;
            this.storedAsSubDirectories = other.storedAsSubDirectories;
        }

        public StorageDescriptor build() {
            return new StorageDescriptor (
                this.cols,
                this.location,
                this.inputFormat,
                this.outputFormat,
                this.compressed,
                this.numBuckets,
                this.serdeInfo,
                this.bucketCols,
                this.sortCols,
                this.parameters,
                this.skewedInfo,
                this.storedAsSubDirectories
            );
        }
    }

    private final List<FieldSchema> cols;

    @ThriftField(value=1, name="cols", requiredness=Requiredness.NONE)
    public List<FieldSchema> getCols() { return cols; }

    private final String location;

    @ThriftField(value=2, name="location", requiredness=Requiredness.NONE)
    public String getLocation() { return location; }

    private final String inputFormat;

    @ThriftField(value=3, name="inputFormat", requiredness=Requiredness.NONE)
    public String getInputFormat() { return inputFormat; }

    private final String outputFormat;

    @ThriftField(value=4, name="outputFormat", requiredness=Requiredness.NONE)
    public String getOutputFormat() { return outputFormat; }

    private final boolean compressed;

    @ThriftField(value=5, name="compressed", requiredness=Requiredness.NONE)
    public boolean isCompressed() { return compressed; }

    private final int numBuckets;

    @ThriftField(value=6, name="numBuckets", requiredness=Requiredness.NONE)
    public int getNumBuckets() { return numBuckets; }

    private final SerDeInfo serdeInfo;

    @ThriftField(value=7, name="serdeInfo", requiredness=Requiredness.NONE)
    public SerDeInfo getSerdeInfo() { return serdeInfo; }

    private final List<String> bucketCols;

    @ThriftField(value=8, name="bucketCols", requiredness=Requiredness.NONE)
    public List<String> getBucketCols() { return bucketCols; }

    private final List<Order> sortCols;

    @ThriftField(value=9, name="sortCols", requiredness=Requiredness.NONE)
    public List<Order> getSortCols() { return sortCols; }

    private final Map<String, String> parameters;

    @ThriftField(value=10, name="parameters", requiredness=Requiredness.NONE)
    public Map<String, String> getParameters() { return parameters; }

    private final SkewedInfo skewedInfo;

    @ThriftField(value=11, name="skewedInfo", requiredness=Requiredness.OPTIONAL)
    public SkewedInfo getSkewedInfo() { return skewedInfo; }

    private final Boolean storedAsSubDirectories;

    @ThriftField(value=12, name="storedAsSubDirectories", requiredness=Requiredness.OPTIONAL)
    public Boolean isStoredAsSubDirectories() { return storedAsSubDirectories; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("cols", cols)
            .add("location", location)
            .add("inputFormat", inputFormat)
            .add("outputFormat", outputFormat)
            .add("compressed", compressed)
            .add("numBuckets", numBuckets)
            .add("serdeInfo", serdeInfo)
            .add("bucketCols", bucketCols)
            .add("sortCols", sortCols)
            .add("parameters", parameters)
            .add("skewedInfo", skewedInfo)
            .add("storedAsSubDirectories", storedAsSubDirectories)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        StorageDescriptor other = (StorageDescriptor)o;

        return
            Objects.equals(cols, other.cols) &&
            Objects.equals(location, other.location) &&
            Objects.equals(inputFormat, other.inputFormat) &&
            Objects.equals(outputFormat, other.outputFormat) &&
            Objects.equals(compressed, other.compressed) &&
            Objects.equals(numBuckets, other.numBuckets) &&
            Objects.equals(serdeInfo, other.serdeInfo) &&
            Objects.equals(bucketCols, other.bucketCols) &&
            Objects.equals(sortCols, other.sortCols) &&
            Objects.equals(parameters, other.parameters) &&
            Objects.equals(skewedInfo, other.skewedInfo) &&
            Objects.equals(storedAsSubDirectories, other.storedAsSubDirectories);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            cols,
            location,
            inputFormat,
            outputFormat,
            compressed,
            numBuckets,
            serdeInfo,
            bucketCols,
            sortCols,
            parameters,
            skewedInfo,
            storedAsSubDirectories
        });
    }
}
