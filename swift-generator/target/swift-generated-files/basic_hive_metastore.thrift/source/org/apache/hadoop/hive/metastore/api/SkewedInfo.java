// Generated by swift-generator from hive/metastore.thrift

package org.apache.hadoop.hive.metastore.api;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("SkewedInfo")
public final class SkewedInfo
{
    @ThriftConstructor
    public SkewedInfo(
        @ThriftField(value=1, name="skewedColNames", requiredness=Requiredness.NONE) final List<String> skewedColNames,
        @ThriftField(value=2, name="skewedColValues", requiredness=Requiredness.NONE) final List<List<String>> skewedColValues,
        @ThriftField(value=3, name="skewedColValueLocationMaps", requiredness=Requiredness.NONE) final Map<SkewedValueList, String> skewedColValueLocationMaps
    ) {
        this.skewedColNames = skewedColNames;
        this.skewedColValues = skewedColValues;
        this.skewedColValueLocationMaps = skewedColValueLocationMaps;
    }

    public static class Builder {
        private List<String> skewedColNames;

        public Builder setSkewedColNames(List<String> skewedColNames) {
            this.skewedColNames = skewedColNames;
            return this;
        }
        private List<List<String>> skewedColValues;

        public Builder setSkewedColValues(List<List<String>> skewedColValues) {
            this.skewedColValues = skewedColValues;
            return this;
        }
        private Map<SkewedValueList, String> skewedColValueLocationMaps;

        public Builder setSkewedColValueLocationMaps(Map<SkewedValueList, String> skewedColValueLocationMaps) {
            this.skewedColValueLocationMaps = skewedColValueLocationMaps;
            return this;
        }

        public Builder() { }
        public Builder(SkewedInfo other) {
            this.skewedColNames = other.skewedColNames;
            this.skewedColValues = other.skewedColValues;
            this.skewedColValueLocationMaps = other.skewedColValueLocationMaps;
        }

        public SkewedInfo build() {
            return new SkewedInfo (
                this.skewedColNames,
                this.skewedColValues,
                this.skewedColValueLocationMaps
            );
        }
    }

    private final List<String> skewedColNames;

    @ThriftField(value=1, name="skewedColNames", requiredness=Requiredness.NONE)
    public List<String> getSkewedColNames() { return skewedColNames; }

    private final List<List<String>> skewedColValues;

    @ThriftField(value=2, name="skewedColValues", requiredness=Requiredness.NONE)
    public List<List<String>> getSkewedColValues() { return skewedColValues; }

    private final Map<SkewedValueList, String> skewedColValueLocationMaps;

    @ThriftField(value=3, name="skewedColValueLocationMaps", requiredness=Requiredness.NONE)
    public Map<SkewedValueList, String> getSkewedColValueLocationMaps() { return skewedColValueLocationMaps; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("skewedColNames", skewedColNames)
            .add("skewedColValues", skewedColValues)
            .add("skewedColValueLocationMaps", skewedColValueLocationMaps)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        SkewedInfo other = (SkewedInfo)o;

        return
            Objects.equals(skewedColNames, other.skewedColNames) &&
            Objects.equals(skewedColValues, other.skewedColValues) &&
            Objects.equals(skewedColValueLocationMaps, other.skewedColValueLocationMaps);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            skewedColNames,
            skewedColValues,
            skewedColValueLocationMaps
        });
    }
}
