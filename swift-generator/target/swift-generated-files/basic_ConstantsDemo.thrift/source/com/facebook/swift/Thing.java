// Generated by swift-generator from ConstantsDemo.thrift

package com.facebook.swift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("thing")
public final class Thing
{
    @ThriftConstructor
    public Thing(
        @ThriftField(value=1, name="hello", requiredness=Requiredness.NONE) final int hello,
        @ThriftField(value=2, name="goodbye", requiredness=Requiredness.NONE) final int goodbye
    ) {
        this.hello = hello;
        this.goodbye = goodbye;
    }

    public static class Builder {
        private int hello;

        public Builder setHello(int hello) {
            this.hello = hello;
            return this;
        }
        private int goodbye;

        public Builder setGoodbye(int goodbye) {
            this.goodbye = goodbye;
            return this;
        }

        public Builder() { }
        public Builder(Thing other) {
            this.hello = other.hello;
            this.goodbye = other.goodbye;
        }

        public Thing build() {
            return new Thing (
                this.hello,
                this.goodbye
            );
        }
    }

    private final int hello;

    @ThriftField(value=1, name="hello", requiredness=Requiredness.NONE)
    public int getHello() { return hello; }

    private final int goodbye;

    @ThriftField(value=2, name="goodbye", requiredness=Requiredness.NONE)
    public int getGoodbye() { return goodbye; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("hello", hello)
            .add("goodbye", goodbye)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Thing other = (Thing)o;

        return
            Objects.equals(hello, other.hello) &&
            Objects.equals(goodbye, other.goodbye);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            hello,
            goodbye
        });
    }
}
