// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ODSSnapshotFilter")
public final class ODSSnapshotFilter
{
    @ThriftConstructor
    public ODSSnapshotFilter(
        @ThriftField(value=1, name="inRgexString", requiredness=Requiredness.NONE) final String inRgexString,
        @ThriftField(value=2, name="notInRgexString", requiredness=Requiredness.NONE) final String notInRgexString,
        @ThriftField(value=3, name="valueString", requiredness=Requiredness.NONE) final String valueString
    ) {
        this.inRgexString = inRgexString;
        this.notInRgexString = notInRgexString;
        this.valueString = valueString;
    }

    public static class Builder {
        private String inRgexString;

        public Builder setInRgexString(String inRgexString) {
            this.inRgexString = inRgexString;
            return this;
        }
        private String notInRgexString;

        public Builder setNotInRgexString(String notInRgexString) {
            this.notInRgexString = notInRgexString;
            return this;
        }
        private String valueString;

        public Builder setValueString(String valueString) {
            this.valueString = valueString;
            return this;
        }

        public Builder() { }
        public Builder(ODSSnapshotFilter other) {
            this.inRgexString = other.inRgexString;
            this.notInRgexString = other.notInRgexString;
            this.valueString = other.valueString;
        }

        public ODSSnapshotFilter build() {
            return new ODSSnapshotFilter (
                this.inRgexString,
                this.notInRgexString,
                this.valueString
            );
        }
    }

    private final String inRgexString;

    @ThriftField(value=1, name="inRgexString", requiredness=Requiredness.NONE)
    public String getInRgexString() { return inRgexString; }

    private final String notInRgexString;

    @ThriftField(value=2, name="notInRgexString", requiredness=Requiredness.NONE)
    public String getNotInRgexString() { return notInRgexString; }

    private final String valueString;

    @ThriftField(value=3, name="valueString", requiredness=Requiredness.NONE)
    public String getValueString() { return valueString; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("inRgexString", inRgexString)
            .add("notInRgexString", notInRgexString)
            .add("valueString", valueString)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ODSSnapshotFilter other = (ODSSnapshotFilter)o;

        return
            Objects.equals(inRgexString, other.inRgexString) &&
            Objects.equals(notInRgexString, other.notInRgexString) &&
            Objects.equals(valueString, other.valueString);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            inRgexString,
            notInRgexString,
            valueString
        });
    }
}
