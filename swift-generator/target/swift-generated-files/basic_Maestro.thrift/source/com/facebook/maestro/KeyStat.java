// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("KeyStat")
public final class KeyStat
{
    @ThriftConstructor
    public KeyStat(
        @ThriftField(value=1, name="key", requiredness=Requiredness.NONE) final String key,
        @ThriftField(value=2, name="count", requiredness=Requiredness.NONE) final double count
    ) {
        this.key = key;
        this.count = count;
    }

    public static class Builder {
        private String key;

        public Builder setKey(String key) {
            this.key = key;
            return this;
        }
        private double count;

        public Builder setCount(double count) {
            this.count = count;
            return this;
        }

        public Builder() { }
        public Builder(KeyStat other) {
            this.key = other.key;
            this.count = other.count;
        }

        public KeyStat build() {
            return new KeyStat (
                this.key,
                this.count
            );
        }
    }

    private final String key;

    @ThriftField(value=1, name="key", requiredness=Requiredness.NONE)
    public String getKey() { return key; }

    private final double count;

    @ThriftField(value=2, name="count", requiredness=Requiredness.NONE)
    public double getCount() { return count; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("key", key)
            .add("count", count)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        KeyStat other = (KeyStat)o;

        return
            Objects.equals(key, other.key) &&
            Objects.equals(count, other.count);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            key,
            count
        });
    }
}
