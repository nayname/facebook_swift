// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ODSRateOfChangeKeyInfo")
public final class ODSRateOfChangeKeyInfo
{
    @ThriftConstructor
    public ODSRateOfChangeKeyInfo(
        @ThriftField(value=1, name="key", requiredness=Requiredness.NONE) final String key,
        @ThriftField(value=2, name="unixTime", requiredness=Requiredness.NONE) final long unixTime,
        @ThriftField(value=3, name="allowable_time_diff", requiredness=Requiredness.NONE) final long allowableTimeDiff,
        @ThriftField(value=4, name="value", requiredness=Requiredness.NONE) final long value,
        @ThriftField(value=5, name="min_rate", requiredness=Requiredness.NONE) final long minRate,
        @ThriftField(value=6, name="max_rate", requiredness=Requiredness.NONE) final long maxRate
    ) {
        this.key = key;
        this.unixTime = unixTime;
        this.allowableTimeDiff = allowableTimeDiff;
        this.value = value;
        this.minRate = minRate;
        this.maxRate = maxRate;
    }

    public static class Builder {
        private String key;

        public Builder setKey(String key) {
            this.key = key;
            return this;
        }
        private long unixTime;

        public Builder setUnixTime(long unixTime) {
            this.unixTime = unixTime;
            return this;
        }
        private long allowableTimeDiff;

        public Builder setAllowableTimeDiff(long allowableTimeDiff) {
            this.allowableTimeDiff = allowableTimeDiff;
            return this;
        }
        private long value;

        public Builder setValue(long value) {
            this.value = value;
            return this;
        }
        private long minRate;

        public Builder setMinRate(long minRate) {
            this.minRate = minRate;
            return this;
        }
        private long maxRate;

        public Builder setMaxRate(long maxRate) {
            this.maxRate = maxRate;
            return this;
        }

        public Builder() { }
        public Builder(ODSRateOfChangeKeyInfo other) {
            this.key = other.key;
            this.unixTime = other.unixTime;
            this.allowableTimeDiff = other.allowableTimeDiff;
            this.value = other.value;
            this.minRate = other.minRate;
            this.maxRate = other.maxRate;
        }

        public ODSRateOfChangeKeyInfo build() {
            return new ODSRateOfChangeKeyInfo (
                this.key,
                this.unixTime,
                this.allowableTimeDiff,
                this.value,
                this.minRate,
                this.maxRate
            );
        }
    }

    private final String key;

    @ThriftField(value=1, name="key", requiredness=Requiredness.NONE)
    public String getKey() { return key; }

    private final long unixTime;

    @ThriftField(value=2, name="unixTime", requiredness=Requiredness.NONE)
    public long getUnixTime() { return unixTime; }

    private final long allowableTimeDiff;

    @ThriftField(value=3, name="allowable_time_diff", requiredness=Requiredness.NONE)
    public long getAllowableTimeDiff() { return allowableTimeDiff; }

    private final long value;

    @ThriftField(value=4, name="value", requiredness=Requiredness.NONE)
    public long getValue() { return value; }

    private final long minRate;

    @ThriftField(value=5, name="min_rate", requiredness=Requiredness.NONE)
    public long getMinRate() { return minRate; }

    private final long maxRate;

    @ThriftField(value=6, name="max_rate", requiredness=Requiredness.NONE)
    public long getMaxRate() { return maxRate; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("key", key)
            .add("unixTime", unixTime)
            .add("allowableTimeDiff", allowableTimeDiff)
            .add("value", value)
            .add("minRate", minRate)
            .add("maxRate", maxRate)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ODSRateOfChangeKeyInfo other = (ODSRateOfChangeKeyInfo)o;

        return
            Objects.equals(key, other.key) &&
            Objects.equals(unixTime, other.unixTime) &&
            Objects.equals(allowableTimeDiff, other.allowableTimeDiff) &&
            Objects.equals(value, other.value) &&
            Objects.equals(minRate, other.minRate) &&
            Objects.equals(maxRate, other.maxRate);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            key,
            unixTime,
            allowableTimeDiff,
            value,
            minRate,
            maxRate
        });
    }
}
