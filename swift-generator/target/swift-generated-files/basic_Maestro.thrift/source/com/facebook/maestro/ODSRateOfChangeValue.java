// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ODSRateOfChangeValue")
public final class ODSRateOfChangeValue
{
    @ThriftConstructor
    public ODSRateOfChangeValue(
        @ThriftField(value=1, name="entity", requiredness=Requiredness.NONE) final String entity,
        @ThriftField(value=2, name="keyinfo", requiredness=Requiredness.NONE) final List<ODSRateOfChangeKeyInfo> keyinfo
    ) {
        this.entity = entity;
        this.keyinfo = keyinfo;
    }

    public static class Builder {
        private String entity;

        public Builder setEntity(String entity) {
            this.entity = entity;
            return this;
        }
        private List<ODSRateOfChangeKeyInfo> keyinfo;

        public Builder setKeyinfo(List<ODSRateOfChangeKeyInfo> keyinfo) {
            this.keyinfo = keyinfo;
            return this;
        }

        public Builder() { }
        public Builder(ODSRateOfChangeValue other) {
            this.entity = other.entity;
            this.keyinfo = other.keyinfo;
        }

        public ODSRateOfChangeValue build() {
            return new ODSRateOfChangeValue (
                this.entity,
                this.keyinfo
            );
        }
    }

    private final String entity;

    @ThriftField(value=1, name="entity", requiredness=Requiredness.NONE)
    public String getEntity() { return entity; }

    private final List<ODSRateOfChangeKeyInfo> keyinfo;

    @ThriftField(value=2, name="keyinfo", requiredness=Requiredness.NONE)
    public List<ODSRateOfChangeKeyInfo> getKeyinfo() { return keyinfo; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("entity", entity)
            .add("keyinfo", keyinfo)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ODSRateOfChangeValue other = (ODSRateOfChangeValue)o;

        return
            Objects.equals(entity, other.entity) &&
            Objects.equals(keyinfo, other.keyinfo);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            entity,
            keyinfo
        });
    }
}
