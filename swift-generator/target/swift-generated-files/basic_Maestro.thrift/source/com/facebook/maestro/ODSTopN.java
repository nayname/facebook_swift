// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ODSTopN")
public final class ODSTopN
{
    @ThriftConstructor
    public ODSTopN(
        @ThriftField(value=1, name="n", requiredness=Requiredness.NONE) final int n,
        @ThriftField(value=2, name="criteria", requiredness=Requiredness.NONE) final OdsTopCriteria criteria,
        @ThriftField(value=3, name="aggType", requiredness=Requiredness.NONE) final int aggType,
        @ThriftField(value=4, name="useEntityAsSmcTier", requiredness=Requiredness.NONE) final boolean useEntityAsSmcTier,
        @ThriftField(value=5, name="useEntityAsHostPort", requiredness=Requiredness.NONE) final boolean useEntityAsHostPort
    ) {
        this.n = n;
        this.criteria = criteria;
        this.aggType = aggType;
        this.useEntityAsSmcTier = useEntityAsSmcTier;
        this.useEntityAsHostPort = useEntityAsHostPort;
    }

    public static class Builder {
        private int n;

        public Builder setN(int n) {
            this.n = n;
            return this;
        }
        private OdsTopCriteria criteria;

        public Builder setCriteria(OdsTopCriteria criteria) {
            this.criteria = criteria;
            return this;
        }
        private int aggType;

        public Builder setAggType(int aggType) {
            this.aggType = aggType;
            return this;
        }
        private boolean useEntityAsSmcTier;

        public Builder setUseEntityAsSmcTier(boolean useEntityAsSmcTier) {
            this.useEntityAsSmcTier = useEntityAsSmcTier;
            return this;
        }
        private boolean useEntityAsHostPort;

        public Builder setUseEntityAsHostPort(boolean useEntityAsHostPort) {
            this.useEntityAsHostPort = useEntityAsHostPort;
            return this;
        }

        public Builder() { }
        public Builder(ODSTopN other) {
            this.n = other.n;
            this.criteria = other.criteria;
            this.aggType = other.aggType;
            this.useEntityAsSmcTier = other.useEntityAsSmcTier;
            this.useEntityAsHostPort = other.useEntityAsHostPort;
        }

        public ODSTopN build() {
            return new ODSTopN (
                this.n,
                this.criteria,
                this.aggType,
                this.useEntityAsSmcTier,
                this.useEntityAsHostPort
            );
        }
    }

    private final int n;

    @ThriftField(value=1, name="n", requiredness=Requiredness.NONE)
    public int getN() { return n; }

    private final OdsTopCriteria criteria;

    @ThriftField(value=2, name="criteria", requiredness=Requiredness.NONE)
    public OdsTopCriteria getCriteria() { return criteria; }

    private final int aggType;

    @ThriftField(value=3, name="aggType", requiredness=Requiredness.NONE)
    public int getAggType() { return aggType; }

    private final boolean useEntityAsSmcTier;

    @ThriftField(value=4, name="useEntityAsSmcTier", requiredness=Requiredness.NONE)
    public boolean isUseEntityAsSmcTier() { return useEntityAsSmcTier; }

    private final boolean useEntityAsHostPort;

    @ThriftField(value=5, name="useEntityAsHostPort", requiredness=Requiredness.NONE)
    public boolean isUseEntityAsHostPort() { return useEntityAsHostPort; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("n", n)
            .add("criteria", criteria)
            .add("aggType", aggType)
            .add("useEntityAsSmcTier", useEntityAsSmcTier)
            .add("useEntityAsHostPort", useEntityAsHostPort)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ODSTopN other = (ODSTopN)o;

        return
            Objects.equals(n, other.n) &&
            Objects.equals(criteria, other.criteria) &&
            Objects.equals(aggType, other.aggType) &&
            Objects.equals(useEntityAsSmcTier, other.useEntityAsSmcTier) &&
            Objects.equals(useEntityAsHostPort, other.useEntityAsHostPort);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            n,
            criteria,
            aggType,
            useEntityAsSmcTier,
            useEntityAsHostPort
        });
    }
}
