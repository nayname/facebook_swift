// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;


@ThriftService("Maestro")
public interface Maestro extends Closeable, com.facebook.fb303.FacebookService
{
    @ThriftService("Maestro")
    public interface Async extends Closeable, com.facebook.fb303.FacebookService.Async
    {
        void close();

        @ThriftMethod(value = "setOdsValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Void> setOdsValues(
            @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSAppValue> data
        );

        @ThriftMethod(value = "setOdsAggValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=1)
                      })
        ListenableFuture<Void> setOdsAggValues(
            @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<OdsAggValue> data
        );

        @ThriftMethod(value = "setOdsRollupValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Void> setOdsRollupValues(
            @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSAppValue> data
        );

        @ThriftMethod(value = "setOdsRateOfChangeValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Void> setOdsRateOfChangeValues(
            @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSRateOfChangeValue> data
        );

        @ThriftMethod(value = "setOdsValuesWithHostRollup",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Void> setOdsValuesWithHostRollup(
            @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSValue> data,
            @ThriftField(value=2, name="doHostRollup", requiredness=Requiredness.NONE) final boolean doHostRollup
        );

        @ThriftMethod(value = "getOdsValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<List<TimeValue>> getOdsValues(
            @ThriftField(value=1, name="entity", requiredness=Requiredness.NONE) final String entity,
            @ThriftField(value=2, name="key", requiredness=Requiredness.NONE) final String key,
            @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=6, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
        );

        @ThriftMethod(value = "setOdsHistoricalData",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-2)
                      })
        ListenableFuture<Void> setOdsHistoricalData(
            @ThriftField(value=-1, name="data", requiredness=Requiredness.NONE, isLegacyId=true) final List<ODSAppValue> data
        );

        @ThriftMethod(value = "deleteOdsHistoricalData",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-2)
                      })
        ListenableFuture<Void> deleteOdsHistoricalData(
            @ThriftField(value=-1, name="data", requiredness=Requiredness.NONE, isLegacyId=true) final List<ODSHistoricalPurgeDefn> data
        );

        @ThriftMethod(value = "getSnapshotWithFilters")
        ListenableFuture<Map<String, List<ODSSnapshotValue>>> getSnapshotWithFilters(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="timeStamp", requiredness=Requiredness.NONE) final long timeStamp,
            @ThriftField(value=4, name="filter", requiredness=Requiredness.NONE) final ODSSnapshotFilter filter,
            @ThriftField(value=5, name="findMissingValue", requiredness=Requiredness.NONE) final boolean findMissingValue,
            @ThriftField(value=6, name="periodOverride", requiredness=Requiredness.NONE) final int periodOverride,
            @ThriftField(value=7, name="entityIsRegex", requiredness=Requiredness.NONE) final boolean entityIsRegex,
            @ThriftField(value=8, name="keyIsRegex", requiredness=Requiredness.NONE) final boolean keyIsRegex
        );

        @ThriftMethod(value = "getSnapshotCompressed")
        ListenableFuture<Map<String, String>> getSnapshotCompressed(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="timeStamp", requiredness=Requiredness.NONE) final long timeStamp,
            @ThriftField(value=4, name="filter", requiredness=Requiredness.NONE) final ODSSnapshotFilter filter,
            @ThriftField(value=5, name="findMissingValue", requiredness=Requiredness.NONE) final boolean findMissingValue,
            @ThriftField(value=6, name="periodOverride", requiredness=Requiredness.NONE) final int periodOverride,
            @ThriftField(value=7, name="entityIsRegex", requiredness=Requiredness.NONE) final boolean entityIsRegex,
            @ThriftField(value=8, name="keyIsRegex", requiredness=Requiredness.NONE) final boolean keyIsRegex
        );

        @ThriftMethod(value = "getEntityValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Map<String, Map<String, List<TimeValue>>>> getEntityValues(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=7, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
        );

        @ThriftMethod(value = "getTimeSeries",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<GetTimeSeriesResults> getTimeSeries(
            @ThriftField(value=1, name="query", requiredness=Requiredness.NONE) final GetTimeSeriesParams query
        );

        @ThriftMethod(value = "getEntityValuesCompressed",
                      exception = {
                          @ThriftException(type=OdsException.class, id=1)
                      })
        ListenableFuture<Map<String, Map<String, String>>> getEntityValuesCompressed(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=7, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
        );

        @ThriftMethod(value = "getRegexEntityValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Map<String, Map<String, List<TimeValue>>>> getRegexEntityValues(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=7, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
        );

        @ThriftMethod(value = "getRegexEntityValuesCompressed",
                      exception = {
                          @ThriftException(type=OdsException.class, id=1)
                      })
        ListenableFuture<Map<String, Map<String, String>>> getRegexEntityValuesCompressed(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=7, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
        );

        @ThriftMethod(value = "getEntityAggValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<AggEntityValue> getEntityAggValues(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=6, name="type", requiredness=Requiredness.NONE) final int type,
            @ThriftField(value=7, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=8, name="bypassLimit", requiredness=Requiredness.NONE) final boolean bypassLimit,
            @ThriftField(value=9, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
        );

        @ThriftMethod(value = "getRegexEntityAggValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<AggEntityValue> getRegexEntityAggValues(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=6, name="type", requiredness=Requiredness.NONE) final int type,
            @ThriftField(value=7, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=8, name="bypassLimit", requiredness=Requiredness.NONE) final boolean bypassLimit,
            @ThriftField(value=9, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
        );

        @ThriftMethod(value = "getAggSources")
        ListenableFuture<String> getAggSources(
            @ThriftField(value=1, name="rgex", requiredness=Requiredness.NONE) final boolean rgex,
            @ThriftField(value=2, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=3, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=4, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=5, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window
        );

        @ThriftMethod(value = "getOdsTimeSeriesByAggregationType")
        ListenableFuture<Map<OdsAggregationType, TransformResult>> getOdsTimeSeriesByAggregationType(
            @ThriftField(value=1, name="regex", requiredness=Requiredness.NONE) final boolean regex,
            @ThriftField(value=2, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=3, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=4, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=5, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=6, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=8, name="type", requiredness=Requiredness.NONE) final int type,
            @ThriftField(value=9, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=10, name="transformConfig", requiredness=Requiredness.NONE) final String transformConfig,
            @ThriftField(value=11, name="aggregationTypeBitMap", requiredness=Requiredness.NONE) final int aggregationTypeBitMap,
            @ThriftField(value=12, name="bestFitDegree", requiredness=Requiredness.NONE) final int bestFitDegree,
            @ThriftField(value=13, name="transformDataSources", requiredness=Requiredness.NONE) final String transformDataSources,
            @ThriftField(value=14, name="topNOpts", requiredness=Requiredness.NONE) final ODSTopN topNOpts
        );

        @ThriftMethod(value = "getOdsTimeSeriesByAggregationTypeCompressed")
        ListenableFuture<Map<OdsAggregationType, TransformResult>> getOdsTimeSeriesByAggregationTypeCompressed(
            @ThriftField(value=1, name="regex", requiredness=Requiredness.NONE) final boolean regex,
            @ThriftField(value=2, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=3, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=4, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=5, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=6, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=8, name="type", requiredness=Requiredness.NONE) final int type,
            @ThriftField(value=9, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=10, name="transformConfig", requiredness=Requiredness.NONE) final String transformConfig,
            @ThriftField(value=11, name="aggregationTypeBitMap", requiredness=Requiredness.NONE) final int aggregationTypeBitMap,
            @ThriftField(value=12, name="bestFitDegree", requiredness=Requiredness.NONE) final int bestFitDegree,
            @ThriftField(value=13, name="transformDataSources", requiredness=Requiredness.NONE) final String transformDataSources,
            @ThriftField(value=14, name="topNOpts", requiredness=Requiredness.NONE) final ODSTopN topNOpts
        );

        @ThriftMethod(value = "getOdsTimeSeriesSimple")
        ListenableFuture<Map<OdsAggregationType, OdsGetResult>> getOdsTimeSeriesSimple(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=7, name="aggregationTypeBitMap", requiredness=Requiredness.NONE) final int aggregationTypeBitMap
        );

        @ThriftMethod(value = "getTimeSeriesByAggType")
        ListenableFuture<GetTimeSeriesByAggTypeResults> getTimeSeriesByAggType(
            @ThriftField(value=1, name="query", requiredness=Requiredness.NONE) final GetTimeSeriesByAggTypeParams query
        );

        @ThriftMethod(value = "getOdsTimeSeriesSimpleCompressed")
        ListenableFuture<Map<OdsAggregationType, String>> getOdsTimeSeriesSimpleCompressed(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
            @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
            @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
            @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
            @ThriftField(value=7, name="aggregationTypeBitMap", requiredness=Requiredness.NONE) final int aggregationTypeBitMap
        );

        @ThriftMethod(value = "getAdvancedTransformQuery",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<List<String>> getAdvancedTransformQuery(
            @ThriftField(value=1, name="start_date", requiredness=Requiredness.NONE) final long startDate,
            @ThriftField(value=2, name="end_date", requiredness=Requiredness.NONE) final long endDate,
            @ThriftField(value=3, name="dataJSON", requiredness=Requiredness.NONE) final String dataJSON,
            @ThriftField(value=4, name="configJSON", requiredness=Requiredness.NONE) final String configJSON
        );

        @ThriftMethod(value = "getTopNActiveKeyPrefix")
        ListenableFuture<List<KeyStat>> getTopNActiveKeyPrefix(
            @ThriftField(value=1, name="n", requiredness=Requiredness.NONE) final int n
        );

        @ThriftMethod(value = "setMultipleOdsValues",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Void> setMultipleOdsValues(
            @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSValue> data
        );

        @ThriftMethod(value = "setODSData",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Void> setODSData(
            @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSData> data
        );

        @ThriftMethod(value = "setOdsFbagentHostData",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Void> setOdsFbagentHostData(
            @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSFbagentData> data
        );

        @ThriftMethod(value = "setOdsFbagentData",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Void> setOdsFbagentData(
            @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSFbagentData> data,
            @ThriftField(value=2, name="skiphostdata", requiredness=Requiredness.NONE) final boolean skiphostdata
        );

        @ThriftMethod(value = "getEntityNames")
        ListenableFuture<List<String>> getEntityNames();

        @ThriftMethod(value = "getKeyNames")
        ListenableFuture<List<String>> getKeyNames();

        @ThriftMethod(value = "getKeyMapping")
        ListenableFuture<Map<String, List<String>>> getKeyMapping(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="minutes_back", requiredness=Requiredness.NONE) final long minutesBack
        );

        @ThriftMethod(value = "getEntityMapping")
        ListenableFuture<Map<String, List<String>>> getEntityMapping(
            @ThriftField(value=1, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=2, name="minutes_back", requiredness=Requiredness.NONE) final long minutesBack
        );

        @ThriftMethod(value = "getAggregateEntityNames")
        ListenableFuture<Set<String>> getAggregateEntityNames(
            @ThriftField(value=1, name="regexp", requiredness=Requiredness.NONE) final String regexp
        );

        @ThriftMethod(value = "getMapping",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<Map<String, List<String>>> getMapping(
            @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=2, name="minutes_back", requiredness=Requiredness.NONE) final long minutesBack,
            @ThriftField(value=3, name="get_key", requiredness=Requiredness.NONE) final boolean getKey
        );

        @ThriftMethod(value = "getCorrespondingKeys",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<OdsKeyEntityMapperResult> getCorrespondingKeys(
            @ThriftField(value=1, name="keywords", requiredness=Requiredness.NONE) final List<String> keywords,
            @ThriftField(value=2, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
            @ThriftField(value=3, name="minutes_back", requiredness=Requiredness.NONE) final int minutesBack,
            @ThriftField(value=4, name="limit", requiredness=Requiredness.NONE) final int limit
        );

        @ThriftMethod(value = "getCorrespondingEntities",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<OdsKeyEntityMapperResult> getCorrespondingEntities(
            @ThriftField(value=1, name="keywords", requiredness=Requiredness.NONE) final List<String> keywords,
            @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
            @ThriftField(value=3, name="minutes_back", requiredness=Requiredness.NONE) final int minutesBack,
            @ThriftField(value=4, name="limit", requiredness=Requiredness.NONE) final int limit
        );

        @ThriftMethod(value = "getEntitiesByTypeAndRegexs",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-2)
                      })
        ListenableFuture<OdsKeyEntityMapperResult> getEntitiesByTypeAndRegexs(
            @ThriftField(value=1, name="entity_type", requiredness=Requiredness.NONE) final int entityType,
            @ThriftField(value=-1, name="limit", requiredness=Requiredness.NONE, isLegacyId=true) final int limit,
            @ThriftField(value=3, name="ordering", requiredness=Requiredness.NONE) final OdsEntityOrderByType ordering,
            @ThriftField(value=4, name="regexes", requiredness=Requiredness.NONE) final List<String> regexes
        );

        @ThriftMethod(value = "getKeysByRegexs",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<OdsKeyEntityMapperResult> getKeysByRegexs(
            @ThriftField(value=1, name="keywords", requiredness=Requiredness.NONE) final List<String> keywords,
            @ThriftField(value=2, name="limit", requiredness=Requiredness.NONE) final int limit,
            @ThriftField(value=3, name="use_cdbdao", requiredness=Requiredness.NONE) final boolean useCdbdao
        );

        @ThriftMethod(value = "getAllAliveNumericKeyPrefixes",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<List<String>> getAllAliveNumericKeyPrefixes(
            @ThriftField(value=1, name="returnKeysWithNoDelimiter", requiredness=Requiredness.NONE) final boolean returnKeysWithNoDelimiter,
            @ThriftField(value=2, name="limit", requiredness=Requiredness.NONE) final int limit
        );

        @ThriftMethod(value = "getAllAliveNumericKeys",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<List<String>> getAllAliveNumericKeys(
            @ThriftField(value=1, name="prefix", requiredness=Requiredness.NONE) final String prefix,
            @ThriftField(value=2, name="limit", requiredness=Requiredness.NONE) final int limit
        );

        @ThriftMethod(value = "getAllKeys")
        ListenableFuture<List<String>> getAllKeys(
            @ThriftField(value=1, name="prefix", requiredness=Requiredness.NONE) final String prefix,
            @ThriftField(value=2, name="key_type", requiredness=Requiredness.NONE) final int keyType
        );

        @ThriftMethod(value = "getGlobalAggregationEntities")
        ListenableFuture<List<String>> getGlobalAggregationEntities();

        @ThriftMethod(value = "findExactMatch")
        ListenableFuture<Boolean> findExactMatch(
            @ThriftField(value=1, name="keyword_to_search", requiredness=Requiredness.NONE) final String keywordToSearch,
            @ThriftField(value=2, name="is_entity", requiredness=Requiredness.NONE) final boolean isEntity
        );

        @ThriftMethod(value = "searchEntityOrKey",
                      exception = {
                          @ThriftException(type=OdsException.class, id=-1)
                      })
        ListenableFuture<OdsKeyEntityMapperResult> searchEntityOrKey(
            @ThriftField(value=1, name="keywords", requiredness=Requiredness.NONE) final List<String> keywords,
            @ThriftField(value=2, name="limit", requiredness=Requiredness.NONE) final int limit,
            @ThriftField(value=3, name="is_entity", requiredness=Requiredness.NONE) final boolean isEntity
        );

        @ThriftMethod(value = "getRecentEntities")
        ListenableFuture<RecentEntitiesOrKeys> getRecentEntities(
            @ThriftField(value=1, name="entity_id", requiredness=Requiredness.NONE) final int entityId
        );

        @ThriftMethod(value = "getRecentKeys")
        ListenableFuture<RecentEntitiesOrKeys> getRecentKeys(
            @ThriftField(value=1, name="key_id", requiredness=Requiredness.NONE) final int keyId
        );

        @ThriftMethod(value = "getEntityIdByName",
                      exception = {
                          @ThriftException(type=OdsException.class, id=1)
                      })
        ListenableFuture<Long> getEntityIdByName(
            @ThriftField(value=1, name="name", requiredness=Requiredness.NONE) final String name
        );

        @ThriftMethod(value = "getMaxEntityId")
        ListenableFuture<Long> getMaxEntityId();

        @ThriftMethod(value = "getKeyIdByName",
                      exception = {
                          @ThriftException(type=OdsException.class, id=1)
                      })
        ListenableFuture<Long> getKeyIdByName(
            @ThriftField(value=1, name="name", requiredness=Requiredness.NONE) final String name
        );

        @ThriftMethod(value = "getMaxKeyId")
        ListenableFuture<Long> getMaxKeyId();

        @ThriftMethod(value = "getDdbIdByEntityId",
                      exception = {
                          @ThriftException(type=OdsException.class, id=1)
                      })
        ListenableFuture<Long> getDdbIdByEntityId(
            @ThriftField(value=1, name="entityId", requiredness=Requiredness.NONE) final long entityId
        );

        @ThriftMethod(value = "getAggregateDdbIdByEntityId",
                      exception = {
                          @ThriftException(type=OdsException.class, id=1)
                      })
        ListenableFuture<Long> getAggregateDdbIdByEntityId(
            @ThriftField(value=1, name="entityId", requiredness=Requiredness.NONE) final long entityId
        );
    }
    void close();


    @ThriftMethod(value = "setOdsValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    void setOdsValues(
        @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSAppValue> data
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "setOdsAggValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=1)
                  })
    void setOdsAggValues(
        @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<OdsAggValue> data
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "setOdsRollupValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    void setOdsRollupValues(
        @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSAppValue> data
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "setOdsRateOfChangeValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    void setOdsRateOfChangeValues(
        @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSRateOfChangeValue> data
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "setOdsValuesWithHostRollup",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    void setOdsValuesWithHostRollup(
        @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSValue> data,
        @ThriftField(value=2, name="doHostRollup", requiredness=Requiredness.NONE) final boolean doHostRollup
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getOdsValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    List<TimeValue> getOdsValues(
        @ThriftField(value=1, name="entity", requiredness=Requiredness.NONE) final String entity,
        @ThriftField(value=2, name="key", requiredness=Requiredness.NONE) final String key,
        @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=6, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "setOdsHistoricalData",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-2)
                  })
    void setOdsHistoricalData(
        @ThriftField(value=-1, name="data", requiredness=Requiredness.NONE, isLegacyId=true) final List<ODSAppValue> data
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "deleteOdsHistoricalData",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-2)
                  })
    void deleteOdsHistoricalData(
        @ThriftField(value=-1, name="data", requiredness=Requiredness.NONE, isLegacyId=true) final List<ODSHistoricalPurgeDefn> data
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getSnapshotWithFilters")
    Map<String, List<ODSSnapshotValue>> getSnapshotWithFilters(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="timeStamp", requiredness=Requiredness.NONE) final long timeStamp,
        @ThriftField(value=4, name="filter", requiredness=Requiredness.NONE) final ODSSnapshotFilter filter,
        @ThriftField(value=5, name="findMissingValue", requiredness=Requiredness.NONE) final boolean findMissingValue,
        @ThriftField(value=6, name="periodOverride", requiredness=Requiredness.NONE) final int periodOverride,
        @ThriftField(value=7, name="entityIsRegex", requiredness=Requiredness.NONE) final boolean entityIsRegex,
        @ThriftField(value=8, name="keyIsRegex", requiredness=Requiredness.NONE) final boolean keyIsRegex
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getSnapshotCompressed")
    Map<String, String> getSnapshotCompressed(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="timeStamp", requiredness=Requiredness.NONE) final long timeStamp,
        @ThriftField(value=4, name="filter", requiredness=Requiredness.NONE) final ODSSnapshotFilter filter,
        @ThriftField(value=5, name="findMissingValue", requiredness=Requiredness.NONE) final boolean findMissingValue,
        @ThriftField(value=6, name="periodOverride", requiredness=Requiredness.NONE) final int periodOverride,
        @ThriftField(value=7, name="entityIsRegex", requiredness=Requiredness.NONE) final boolean entityIsRegex,
        @ThriftField(value=8, name="keyIsRegex", requiredness=Requiredness.NONE) final boolean keyIsRegex
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getEntityValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    Map<String, Map<String, List<TimeValue>>> getEntityValues(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=7, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getTimeSeries",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    GetTimeSeriesResults getTimeSeries(
        @ThriftField(value=1, name="query", requiredness=Requiredness.NONE) final GetTimeSeriesParams query
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getEntityValuesCompressed",
                  exception = {
                      @ThriftException(type=OdsException.class, id=1)
                  })
    Map<String, Map<String, String>> getEntityValuesCompressed(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=7, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getRegexEntityValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    Map<String, Map<String, List<TimeValue>>> getRegexEntityValues(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=7, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getRegexEntityValuesCompressed",
                  exception = {
                      @ThriftException(type=OdsException.class, id=1)
                  })
    Map<String, Map<String, String>> getRegexEntityValuesCompressed(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=7, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getEntityAggValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    AggEntityValue getEntityAggValues(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=6, name="type", requiredness=Requiredness.NONE) final int type,
        @ThriftField(value=7, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=8, name="bypassLimit", requiredness=Requiredness.NONE) final boolean bypassLimit,
        @ThriftField(value=9, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getRegexEntityAggValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    AggEntityValue getRegexEntityAggValues(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=6, name="type", requiredness=Requiredness.NONE) final int type,
        @ThriftField(value=7, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=8, name="bypassLimit", requiredness=Requiredness.NONE) final boolean bypassLimit,
        @ThriftField(value=9, name="aggregationType", requiredness=Requiredness.NONE) final int aggregationType
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getAggSources")
    String getAggSources(
        @ThriftField(value=1, name="rgex", requiredness=Requiredness.NONE) final boolean rgex,
        @ThriftField(value=2, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=3, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=4, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=5, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getOdsTimeSeriesByAggregationType")
    Map<OdsAggregationType, TransformResult> getOdsTimeSeriesByAggregationType(
        @ThriftField(value=1, name="regex", requiredness=Requiredness.NONE) final boolean regex,
        @ThriftField(value=2, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=3, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=4, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=5, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=6, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=8, name="type", requiredness=Requiredness.NONE) final int type,
        @ThriftField(value=9, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=10, name="transformConfig", requiredness=Requiredness.NONE) final String transformConfig,
        @ThriftField(value=11, name="aggregationTypeBitMap", requiredness=Requiredness.NONE) final int aggregationTypeBitMap,
        @ThriftField(value=12, name="bestFitDegree", requiredness=Requiredness.NONE) final int bestFitDegree,
        @ThriftField(value=13, name="transformDataSources", requiredness=Requiredness.NONE) final String transformDataSources,
        @ThriftField(value=14, name="topNOpts", requiredness=Requiredness.NONE) final ODSTopN topNOpts
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getOdsTimeSeriesByAggregationTypeCompressed")
    Map<OdsAggregationType, TransformResult> getOdsTimeSeriesByAggregationTypeCompressed(
        @ThriftField(value=1, name="regex", requiredness=Requiredness.NONE) final boolean regex,
        @ThriftField(value=2, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=3, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=4, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=5, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=6, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=8, name="type", requiredness=Requiredness.NONE) final int type,
        @ThriftField(value=9, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=10, name="transformConfig", requiredness=Requiredness.NONE) final String transformConfig,
        @ThriftField(value=11, name="aggregationTypeBitMap", requiredness=Requiredness.NONE) final int aggregationTypeBitMap,
        @ThriftField(value=12, name="bestFitDegree", requiredness=Requiredness.NONE) final int bestFitDegree,
        @ThriftField(value=13, name="transformDataSources", requiredness=Requiredness.NONE) final String transformDataSources,
        @ThriftField(value=14, name="topNOpts", requiredness=Requiredness.NONE) final ODSTopN topNOpts
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getOdsTimeSeriesSimple")
    Map<OdsAggregationType, OdsGetResult> getOdsTimeSeriesSimple(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=7, name="aggregationTypeBitMap", requiredness=Requiredness.NONE) final int aggregationTypeBitMap
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getTimeSeriesByAggType")
    GetTimeSeriesByAggTypeResults getTimeSeriesByAggType(
        @ThriftField(value=1, name="query", requiredness=Requiredness.NONE) final GetTimeSeriesByAggTypeParams query
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getOdsTimeSeriesSimpleCompressed")
    Map<OdsAggregationType, String> getOdsTimeSeriesSimpleCompressed(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="start", requiredness=Requiredness.NONE) final long start,
        @ThriftField(value=4, name="end", requiredness=Requiredness.NONE) final long end,
        @ThriftField(value=5, name="table", requiredness=Requiredness.NONE) final OdsDataTable table,
        @ThriftField(value=6, name="window", requiredness=Requiredness.NONE) final int window,
        @ThriftField(value=7, name="aggregationTypeBitMap", requiredness=Requiredness.NONE) final int aggregationTypeBitMap
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getAdvancedTransformQuery",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    List<String> getAdvancedTransformQuery(
        @ThriftField(value=1, name="start_date", requiredness=Requiredness.NONE) final long startDate,
        @ThriftField(value=2, name="end_date", requiredness=Requiredness.NONE) final long endDate,
        @ThriftField(value=3, name="dataJSON", requiredness=Requiredness.NONE) final String dataJSON,
        @ThriftField(value=4, name="configJSON", requiredness=Requiredness.NONE) final String configJSON
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getTopNActiveKeyPrefix")
    List<KeyStat> getTopNActiveKeyPrefix(
        @ThriftField(value=1, name="n", requiredness=Requiredness.NONE) final int n
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "setMultipleOdsValues",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    void setMultipleOdsValues(
        @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSValue> data
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "setODSData",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    void setODSData(
        @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSData> data
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "setOdsFbagentHostData",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    void setOdsFbagentHostData(
        @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSFbagentData> data
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "setOdsFbagentData",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    void setOdsFbagentData(
        @ThriftField(value=1, name="data", requiredness=Requiredness.NONE) final List<ODSFbagentData> data,
        @ThriftField(value=2, name="skiphostdata", requiredness=Requiredness.NONE) final boolean skiphostdata
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getEntityNames")
    List<String> getEntityNames() throws org.apache.thrift.TException;

    @ThriftMethod(value = "getKeyNames")
    List<String> getKeyNames() throws org.apache.thrift.TException;

    @ThriftMethod(value = "getKeyMapping")
    Map<String, List<String>> getKeyMapping(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="minutes_back", requiredness=Requiredness.NONE) final long minutesBack
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getEntityMapping")
    Map<String, List<String>> getEntityMapping(
        @ThriftField(value=1, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=2, name="minutes_back", requiredness=Requiredness.NONE) final long minutesBack
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getAggregateEntityNames")
    Set<String> getAggregateEntityNames(
        @ThriftField(value=1, name="regexp", requiredness=Requiredness.NONE) final String regexp
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getMapping",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    Map<String, List<String>> getMapping(
        @ThriftField(value=1, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=2, name="minutes_back", requiredness=Requiredness.NONE) final long minutesBack,
        @ThriftField(value=3, name="get_key", requiredness=Requiredness.NONE) final boolean getKey
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getCorrespondingKeys",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    OdsKeyEntityMapperResult getCorrespondingKeys(
        @ThriftField(value=1, name="keywords", requiredness=Requiredness.NONE) final List<String> keywords,
        @ThriftField(value=2, name="entities", requiredness=Requiredness.NONE) final List<String> entities,
        @ThriftField(value=3, name="minutes_back", requiredness=Requiredness.NONE) final int minutesBack,
        @ThriftField(value=4, name="limit", requiredness=Requiredness.NONE) final int limit
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getCorrespondingEntities",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    OdsKeyEntityMapperResult getCorrespondingEntities(
        @ThriftField(value=1, name="keywords", requiredness=Requiredness.NONE) final List<String> keywords,
        @ThriftField(value=2, name="keys", requiredness=Requiredness.NONE) final List<String> keys,
        @ThriftField(value=3, name="minutes_back", requiredness=Requiredness.NONE) final int minutesBack,
        @ThriftField(value=4, name="limit", requiredness=Requiredness.NONE) final int limit
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getEntitiesByTypeAndRegexs",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-2)
                  })
    OdsKeyEntityMapperResult getEntitiesByTypeAndRegexs(
        @ThriftField(value=1, name="entity_type", requiredness=Requiredness.NONE) final int entityType,
        @ThriftField(value=-1, name="limit", requiredness=Requiredness.NONE, isLegacyId=true) final int limit,
        @ThriftField(value=3, name="ordering", requiredness=Requiredness.NONE) final OdsEntityOrderByType ordering,
        @ThriftField(value=4, name="regexes", requiredness=Requiredness.NONE) final List<String> regexes
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getKeysByRegexs",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    OdsKeyEntityMapperResult getKeysByRegexs(
        @ThriftField(value=1, name="keywords", requiredness=Requiredness.NONE) final List<String> keywords,
        @ThriftField(value=2, name="limit", requiredness=Requiredness.NONE) final int limit,
        @ThriftField(value=3, name="use_cdbdao", requiredness=Requiredness.NONE) final boolean useCdbdao
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getAllAliveNumericKeyPrefixes",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    List<String> getAllAliveNumericKeyPrefixes(
        @ThriftField(value=1, name="returnKeysWithNoDelimiter", requiredness=Requiredness.NONE) final boolean returnKeysWithNoDelimiter,
        @ThriftField(value=2, name="limit", requiredness=Requiredness.NONE) final int limit
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getAllAliveNumericKeys",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    List<String> getAllAliveNumericKeys(
        @ThriftField(value=1, name="prefix", requiredness=Requiredness.NONE) final String prefix,
        @ThriftField(value=2, name="limit", requiredness=Requiredness.NONE) final int limit
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getAllKeys")
    List<String> getAllKeys(
        @ThriftField(value=1, name="prefix", requiredness=Requiredness.NONE) final String prefix,
        @ThriftField(value=2, name="key_type", requiredness=Requiredness.NONE) final int keyType
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getGlobalAggregationEntities")
    List<String> getGlobalAggregationEntities() throws org.apache.thrift.TException;

    @ThriftMethod(value = "findExactMatch")
    boolean findExactMatch(
        @ThriftField(value=1, name="keyword_to_search", requiredness=Requiredness.NONE) final String keywordToSearch,
        @ThriftField(value=2, name="is_entity", requiredness=Requiredness.NONE) final boolean isEntity
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "searchEntityOrKey",
                  exception = {
                      @ThriftException(type=OdsException.class, id=-1)
                  })
    OdsKeyEntityMapperResult searchEntityOrKey(
        @ThriftField(value=1, name="keywords", requiredness=Requiredness.NONE) final List<String> keywords,
        @ThriftField(value=2, name="limit", requiredness=Requiredness.NONE) final int limit,
        @ThriftField(value=3, name="is_entity", requiredness=Requiredness.NONE) final boolean isEntity
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getRecentEntities")
    RecentEntitiesOrKeys getRecentEntities(
        @ThriftField(value=1, name="entity_id", requiredness=Requiredness.NONE) final int entityId
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getRecentKeys")
    RecentEntitiesOrKeys getRecentKeys(
        @ThriftField(value=1, name="key_id", requiredness=Requiredness.NONE) final int keyId
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getEntityIdByName",
                  exception = {
                      @ThriftException(type=OdsException.class, id=1)
                  })
    long getEntityIdByName(
        @ThriftField(value=1, name="name", requiredness=Requiredness.NONE) final String name
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getMaxEntityId")
    long getMaxEntityId() throws org.apache.thrift.TException;

    @ThriftMethod(value = "getKeyIdByName",
                  exception = {
                      @ThriftException(type=OdsException.class, id=1)
                  })
    long getKeyIdByName(
        @ThriftField(value=1, name="name", requiredness=Requiredness.NONE) final String name
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getMaxKeyId")
    long getMaxKeyId() throws org.apache.thrift.TException;

    @ThriftMethod(value = "getDdbIdByEntityId",
                  exception = {
                      @ThriftException(type=OdsException.class, id=1)
                  })
    long getDdbIdByEntityId(
        @ThriftField(value=1, name="entityId", requiredness=Requiredness.NONE) final long entityId
    ) throws OdsException, org.apache.thrift.TException;

    @ThriftMethod(value = "getAggregateDdbIdByEntityId",
                  exception = {
                      @ThriftException(type=OdsException.class, id=1)
                  })
    long getAggregateDdbIdByEntityId(
        @ThriftField(value=1, name="entityId", requiredness=Requiredness.NONE) final long entityId
    ) throws OdsException, org.apache.thrift.TException;
}