// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("AggSettings")
public final class AggSettings
{
    @ThriftConstructor
    public AggSettings(
        @ThriftField(value=1, name="name", requiredness=Requiredness.NONE) final String name,
        @ThriftField(value=2, name="interval", requiredness=Requiredness.NONE) final int interval,
        @ThriftField(value=3, name="cross_datacenter", requiredness=Requiredness.NONE) final boolean crossDatacenter,
        @ThriftField(value=4, name="category_id", requiredness=Requiredness.NONE) final int categoryId
    ) {
        this.name = name;
        this.interval = interval;
        this.crossDatacenter = crossDatacenter;
        this.categoryId = categoryId;
    }

    public static class Builder {
        private String name;

        public Builder setName(String name) {
            this.name = name;
            return this;
        }
        private int interval;

        public Builder setInterval(int interval) {
            this.interval = interval;
            return this;
        }
        private boolean crossDatacenter;

        public Builder setCrossDatacenter(boolean crossDatacenter) {
            this.crossDatacenter = crossDatacenter;
            return this;
        }
        private int categoryId;

        public Builder setCategoryId(int categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public Builder() { }
        public Builder(AggSettings other) {
            this.name = other.name;
            this.interval = other.interval;
            this.crossDatacenter = other.crossDatacenter;
            this.categoryId = other.categoryId;
        }

        public AggSettings build() {
            return new AggSettings (
                this.name,
                this.interval,
                this.crossDatacenter,
                this.categoryId
            );
        }
    }

    private final String name;

    @ThriftField(value=1, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    private final int interval;

    @ThriftField(value=2, name="interval", requiredness=Requiredness.NONE)
    public int getInterval() { return interval; }

    private final boolean crossDatacenter;

    @ThriftField(value=3, name="cross_datacenter", requiredness=Requiredness.NONE)
    public boolean isCrossDatacenter() { return crossDatacenter; }

    private final int categoryId;

    @ThriftField(value=4, name="category_id", requiredness=Requiredness.NONE)
    public int getCategoryId() { return categoryId; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("name", name)
            .add("interval", interval)
            .add("crossDatacenter", crossDatacenter)
            .add("categoryId", categoryId)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        AggSettings other = (AggSettings)o;

        return
            Objects.equals(name, other.name) &&
            Objects.equals(interval, other.interval) &&
            Objects.equals(crossDatacenter, other.crossDatacenter) &&
            Objects.equals(categoryId, other.categoryId);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            name,
            interval,
            crossDatacenter,
            categoryId
        });
    }
}
