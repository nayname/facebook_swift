// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("OdsKeyEntityMapperResult")
public final class OdsKeyEntityMapperResult
{
    @ThriftConstructor
    public OdsKeyEntityMapperResult(
        @ThriftField(value=1, name="total_results", requiredness=Requiredness.NONE) final int totalResults,
        @ThriftField(value=2, name="objects", requiredness=Requiredness.NONE) final List<String> objects
    ) {
        this.totalResults = totalResults;
        this.objects = objects;
    }

    public static class Builder {
        private int totalResults;

        public Builder setTotalResults(int totalResults) {
            this.totalResults = totalResults;
            return this;
        }
        private List<String> objects;

        public Builder setObjects(List<String> objects) {
            this.objects = objects;
            return this;
        }

        public Builder() { }
        public Builder(OdsKeyEntityMapperResult other) {
            this.totalResults = other.totalResults;
            this.objects = other.objects;
        }

        public OdsKeyEntityMapperResult build() {
            return new OdsKeyEntityMapperResult (
                this.totalResults,
                this.objects
            );
        }
    }

    private final int totalResults;

    @ThriftField(value=1, name="total_results", requiredness=Requiredness.NONE)
    public int getTotalResults() { return totalResults; }

    private final List<String> objects;

    @ThriftField(value=2, name="objects", requiredness=Requiredness.NONE)
    public List<String> getObjects() { return objects; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("totalResults", totalResults)
            .add("objects", objects)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        OdsKeyEntityMapperResult other = (OdsKeyEntityMapperResult)o;

        return
            Objects.equals(totalResults, other.totalResults) &&
            Objects.equals(objects, other.objects);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            totalResults,
            objects
        });
    }
}
