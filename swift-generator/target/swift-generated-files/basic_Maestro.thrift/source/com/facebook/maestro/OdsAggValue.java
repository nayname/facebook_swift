// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("OdsAggValue")
public final class OdsAggValue
{
    @ThriftConstructor
    public OdsAggValue(
        @ThriftField(value=1, name="entity", requiredness=Requiredness.NONE) final String entity,
        @ThriftField(value=2, name="key", requiredness=Requiredness.NONE) final String key,
        @ThriftField(value=3, name="unixTime", requiredness=Requiredness.NONE) final long unixTime,
        @ThriftField(value=4, name="avg", requiredness=Requiredness.NONE) final double avg,
        @ThriftField(value=5, name="sum", requiredness=Requiredness.NONE) final double sum,
        @ThriftField(value=6, name="min", requiredness=Requiredness.NONE) final double min,
        @ThriftField(value=7, name="max", requiredness=Requiredness.NONE) final double max,
        @ThriftField(value=8, name="count", requiredness=Requiredness.NONE) final int count,
        @ThriftField(value=9, name="category_id", requiredness=Requiredness.NONE) final int categoryId
    ) {
        this.entity = entity;
        this.key = key;
        this.unixTime = unixTime;
        this.avg = avg;
        this.sum = sum;
        this.min = min;
        this.max = max;
        this.count = count;
        this.categoryId = categoryId;
    }

    public static class Builder {
        private String entity;

        public Builder setEntity(String entity) {
            this.entity = entity;
            return this;
        }
        private String key;

        public Builder setKey(String key) {
            this.key = key;
            return this;
        }
        private long unixTime;

        public Builder setUnixTime(long unixTime) {
            this.unixTime = unixTime;
            return this;
        }
        private double avg;

        public Builder setAvg(double avg) {
            this.avg = avg;
            return this;
        }
        private double sum;

        public Builder setSum(double sum) {
            this.sum = sum;
            return this;
        }
        private double min;

        public Builder setMin(double min) {
            this.min = min;
            return this;
        }
        private double max;

        public Builder setMax(double max) {
            this.max = max;
            return this;
        }
        private int count;

        public Builder setCount(int count) {
            this.count = count;
            return this;
        }
        private int categoryId;

        public Builder setCategoryId(int categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public Builder() { }
        public Builder(OdsAggValue other) {
            this.entity = other.entity;
            this.key = other.key;
            this.unixTime = other.unixTime;
            this.avg = other.avg;
            this.sum = other.sum;
            this.min = other.min;
            this.max = other.max;
            this.count = other.count;
            this.categoryId = other.categoryId;
        }

        public OdsAggValue build() {
            return new OdsAggValue (
                this.entity,
                this.key,
                this.unixTime,
                this.avg,
                this.sum,
                this.min,
                this.max,
                this.count,
                this.categoryId
            );
        }
    }

    private final String entity;

    @ThriftField(value=1, name="entity", requiredness=Requiredness.NONE)
    public String getEntity() { return entity; }

    private final String key;

    @ThriftField(value=2, name="key", requiredness=Requiredness.NONE)
    public String getKey() { return key; }

    private final long unixTime;

    @ThriftField(value=3, name="unixTime", requiredness=Requiredness.NONE)
    public long getUnixTime() { return unixTime; }

    private final double avg;

    @ThriftField(value=4, name="avg", requiredness=Requiredness.NONE)
    public double getAvg() { return avg; }

    private final double sum;

    @ThriftField(value=5, name="sum", requiredness=Requiredness.NONE)
    public double getSum() { return sum; }

    private final double min;

    @ThriftField(value=6, name="min", requiredness=Requiredness.NONE)
    public double getMin() { return min; }

    private final double max;

    @ThriftField(value=7, name="max", requiredness=Requiredness.NONE)
    public double getMax() { return max; }

    private final int count;

    @ThriftField(value=8, name="count", requiredness=Requiredness.NONE)
    public int getCount() { return count; }

    private final int categoryId;

    @ThriftField(value=9, name="category_id", requiredness=Requiredness.NONE)
    public int getCategoryId() { return categoryId; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("entity", entity)
            .add("key", key)
            .add("unixTime", unixTime)
            .add("avg", avg)
            .add("sum", sum)
            .add("min", min)
            .add("max", max)
            .add("count", count)
            .add("categoryId", categoryId)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        OdsAggValue other = (OdsAggValue)o;

        return
            Objects.equals(entity, other.entity) &&
            Objects.equals(key, other.key) &&
            Objects.equals(unixTime, other.unixTime) &&
            Objects.equals(avg, other.avg) &&
            Objects.equals(sum, other.sum) &&
            Objects.equals(min, other.min) &&
            Objects.equals(max, other.max) &&
            Objects.equals(count, other.count) &&
            Objects.equals(categoryId, other.categoryId);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            entity,
            key,
            unixTime,
            avg,
            sum,
            min,
            max,
            count,
            categoryId
        });
    }
}
