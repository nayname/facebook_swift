// Generated by swift-generator from Maestro.thrift

package com.facebook.maestro;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ODSSnapshotValue")
public final class ODSSnapshotValue
{
    @ThriftConstructor
    public ODSSnapshotValue(
        @ThriftField(value=1, name="entity", requiredness=Requiredness.NONE) final String entity,
        @ThriftField(value=2, name="value", requiredness=Requiredness.NONE) final String value,
        @ThriftField(value=3, name="isValid", requiredness=Requiredness.NONE) final boolean isValid,
        @ThriftField(value=4, name="isAlive", requiredness=Requiredness.NONE) final boolean isAlive
    ) {
        this.entity = entity;
        this.value = value;
        this.isValid = isValid;
        this.isAlive = isAlive;
    }

    public static class Builder {
        private String entity;

        public Builder setEntity(String entity) {
            this.entity = entity;
            return this;
        }
        private String value;

        public Builder setValue(String value) {
            this.value = value;
            return this;
        }
        private boolean isValid;

        public Builder setIsValid(boolean isValid) {
            this.isValid = isValid;
            return this;
        }
        private boolean isAlive;

        public Builder setIsAlive(boolean isAlive) {
            this.isAlive = isAlive;
            return this;
        }

        public Builder() { }
        public Builder(ODSSnapshotValue other) {
            this.entity = other.entity;
            this.value = other.value;
            this.isValid = other.isValid;
            this.isAlive = other.isAlive;
        }

        public ODSSnapshotValue build() {
            return new ODSSnapshotValue (
                this.entity,
                this.value,
                this.isValid,
                this.isAlive
            );
        }
    }

    private final String entity;

    @ThriftField(value=1, name="entity", requiredness=Requiredness.NONE)
    public String getEntity() { return entity; }

    private final String value;

    @ThriftField(value=2, name="value", requiredness=Requiredness.NONE)
    public String getValue() { return value; }

    private final boolean isValid;

    @ThriftField(value=3, name="isValid", requiredness=Requiredness.NONE)
    public boolean isIsValid() { return isValid; }

    private final boolean isAlive;

    @ThriftField(value=4, name="isAlive", requiredness=Requiredness.NONE)
    public boolean isIsAlive() { return isAlive; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("entity", entity)
            .add("value", value)
            .add("isValid", isValid)
            .add("isAlive", isAlive)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ODSSnapshotValue other = (ODSSnapshotValue)o;

        return
            Objects.equals(entity, other.entity) &&
            Objects.equals(value, other.value) &&
            Objects.equals(isValid, other.isValid) &&
            Objects.equals(isAlive, other.isAlive);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            entity,
            value,
            isValid,
            isAlive
        });
    }
}
