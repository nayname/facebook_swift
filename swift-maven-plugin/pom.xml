<!--

    Copyright (C) 2012 Facebook, Inc.

    Licensed under the Apache License, Version 2.0 (the "License"); you may
    not use this file except in compliance with the License. You may obtain
    a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations
    under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.facebook.swift</groupId>
    <artifactId>swift-root</artifactId>
    <version>0.23.2-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <groupId>com.facebook.mojo</groupId>
  <artifactId>swift-maven-plugin</artifactId>

  <packaging>maven-plugin</packaging>
  <name>${project.artifactId}</name>
  <description>
    The Maven swift plugin generates source code from Thrift IDL files.
    It is aimed at generating code for the swift framework of annotation based
    Java thrift classes but could be used with any programming language by adding
    code generation templates.
  </description>

  <properties>
    <air.main.basedir>${project.parent.basedir}</air.main.basedir>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.facebook.swift</groupId>
      <artifactId>swift-generator</artifactId>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>

    <!-- maven -->
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
    </dependency>

    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven.plugin-tools</groupId>
      <artifactId>maven-plugin-annotations</artifactId>
    </dependency>

    <!-- for testing -->
    <dependency>
      <groupId>io.takari.maven.plugins</groupId>
      <artifactId>takari-plugin-testing</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.takari.maven.plugins</groupId>
      <artifactId>takari-plugin-integration-testing</artifactId>
      <type>pom</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-plugin-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.plexus</groupId>
        <artifactId>plexus-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>io.takari.maven.plugins</groupId>
        <artifactId>takari-lifecycle-plugin</artifactId>
        <extensions>true</extensions>
        <executions>
          <execution>
            <id>testProperties</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testProperties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <systemProperties>
            <!-- Normally surefire tests run in an isolated environment, not carrying in any of the -->
            <!-- default configuration, but integration tests for this plugin download a few versions -->
            <!-- of maven to test the plugin against them. These downloads may need to use the network -->
            <!-- settings from the user's environment. -->
            <java.net.preferIPv6Addresses>${java.net.preferIPv6Addresses}</java.net.preferIPv6Addresses>
            <http.proxyHost>${http.proxyHost}</http.proxyHost>
            <http.proxyPort>${http.proxyPort}</http.proxyPort>
            <http.nonProxyHosts>${http.nonProxyHosts}</http.nonProxyHosts>
          </systemProperties>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
